
bin/Lab12.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000450 	.word	0x20000450
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080017bc 	.word	0x080017bc

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	080017bc 	.word	0x080017bc
 80001d8:	20000454 	.word	0x20000454
 80001dc:	20000450 	.word	0x20000450
 80001e0:	00000000 	.word	0x00000000

080001e4 <gpio_d_init>:
  .text

  FUNCTION gpio_d_init,global

    // Push lr onto the stack
    push {lr}
 80001e4:	b500      	push	{lr}

    // Set r0 to 3 since we want to enable the clock for GPIOD
    mov r0,#3
 80001e6:	f04f 0003 	mov.w	r0, #3
    bl  rcc_gpio_enable
 80001ea:	f000 f83d 	bl	8000268 <rcc_gpio_enable>

    // Load r3 with the GPIOD base address
    ldr r3,=#GPIOD_BASE
 80001ee:	4b06      	ldr	r3, [pc, #24]	; (8000208 <gpio_d_init+0x24>)

    // Initialize the pins in port D to output
    ldr r2,=#0x00000000
 80001f0:	4a06      	ldr	r2, [pc, #24]	; (800020c <gpio_d_init+0x28>)
    str r2,[r3,#GPIO_PUPDR]
 80001f2:	60da      	str	r2, [r3, #12]
    str r2,[r3,#GPIO_OTYPER]
 80001f4:	605a      	str	r2, [r3, #4]
    str r2,[r3,#GPIO_ODR]
 80001f6:	615a      	str	r2, [r3, #20]

    ldr r2,=#0x55555555
 80001f8:	4a05      	ldr	r2, [pc, #20]	; (8000210 <gpio_d_init+0x2c>)
    str r2,[r3,#GPIO_MODER]
 80001fa:	601a      	str	r2, [r3, #0]

    ldr r2,=#0xffffffff
 80001fc:	4a05      	ldr	r2, [pc, #20]	; (8000214 <gpio_d_init+0x30>)
    str r2,[r3,#GPIO_OSPEEDR]
 80001fe:	609a      	str	r2, [r3, #8]
    
    // Pop lr off the stack
    pop {lr}
 8000200:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 8000204:	4770      	bx	lr
 8000206:	0000      	.short	0x0000
    // Set r0 to 3 since we want to enable the clock for GPIOD
    mov r0,#3
    bl  rcc_gpio_enable

    // Load r3 with the GPIOD base address
    ldr r3,=#GPIOD_BASE
 8000208:	40020c00 	.word	0x40020c00

    // Initialize the pins in port D to output
    ldr r2,=#0x00000000
 800020c:	00000000 	.word	0x00000000
    str r2,[r3,#GPIO_PUPDR]
    str r2,[r3,#GPIO_OTYPER]
    str r2,[r3,#GPIO_ODR]

    ldr r2,=#0x55555555
 8000210:	55555555 	.word	0x55555555
    str r2,[r3,#GPIO_MODER]

    ldr r2,=#0xffffffff
 8000214:	ffffffff 	.word	0xffffffff

08000218 <gpio_d_put>:

  // Define function gpio_d_put 
  FUNCTION gpio_d_put,global
    
    // Load the base address of GPIOD into r3
    ldr r3,=#GPIOD_BASE
 8000218:	4b01      	ldr	r3, [pc, #4]	; (8000220 <gpio_d_put+0x8>)

    str r0,[r3,#GPIO_ODR]
 800021a:	6158      	str	r0, [r3, #20]

    bx  lr
 800021c:	4770      	bx	lr
 800021e:	0000      	.short	0x0000

  // Define function gpio_d_put 
  FUNCTION gpio_d_put,global
    
    // Load the base address of GPIOD into r3
    ldr r3,=#GPIOD_BASE
 8000220:	40020c00 	.word	0x40020c00

08000224 <gpio_d_get_current>:
  
  // Define function gpio_d_get_current 
  FUNCTION gpio_d_get_current,global
    
    // Load the base address of GPIOD into r3
    ldr r3,=#GPIOD_BASE
 8000224:	4b01      	ldr	r3, [pc, #4]	; (800022c <gpio_d_get_current+0x8>)

    ldr r0,[r3,#GPIO_ODR]
 8000226:	6958      	ldr	r0, [r3, #20]

    bx  lr
 8000228:	4770      	bx	lr
 800022a:	0000      	.short	0x0000
  
  // Define function gpio_d_get_current 
  FUNCTION gpio_d_get_current,global
    
    // Load the base address of GPIOD into r3
    ldr r3,=#GPIOD_BASE
 800022c:	40020c00 	.word	0x40020c00

08000230 <gpio_c_init>:

  // GPIOC function definition
  FUNCTION gpio_c_init,global

    // Pushing lr onto the stack
    push {lr}
 8000230:	b500      	push	{lr}

    // Set r0 to 2 as we want to enable the clock for port C
    mov r0,#2
 8000232:	f04f 0002 	mov.w	r0, #2
    bl  rcc_gpio_enable
 8000236:	f000 f817 	bl	8000268 <rcc_gpio_enable>

    // Set r3 to GPIO C base address
    ldr r3,=#GPIOC_BASE
 800023a:	4b05      	ldr	r3, [pc, #20]	; (8000250 <gpio_c_init+0x20>)

    // Initialize all the pins to input using the right offsets
    ldr r2,=#0x00000000
 800023c:	4a05      	ldr	r2, [pc, #20]	; (8000254 <gpio_c_init+0x24>)
    str r2,[r3,#GPIO_PUPDR]
 800023e:	60da      	str	r2, [r3, #12]
    str r2,[r3,#GPIO_MODER]
 8000240:	601a      	str	r2, [r3, #0]
    str r2,[r3,#GPIO_OTYPER]
 8000242:	605a      	str	r2, [r3, #4]

    ldr r2,=#0xffffffff
 8000244:	4a04      	ldr	r2, [pc, #16]	; (8000258 <gpio_c_init+0x28>)
    str r2,[r3,#GPIO_OSPEEDR]
 8000246:	609a      	str	r2, [r3, #8]

    // Pop lr off the stack
    pop {lr}
 8000248:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 800024c:	4770      	bx	lr
 800024e:	0000      	.short	0x0000
    // Set r0 to 2 as we want to enable the clock for port C
    mov r0,#2
    bl  rcc_gpio_enable

    // Set r3 to GPIO C base address
    ldr r3,=#GPIOC_BASE
 8000250:	40020800 	.word	0x40020800

    // Initialize all the pins to input using the right offsets
    ldr r2,=#0x00000000
 8000254:	00000000 	.word	0x00000000
    str r2,[r3,#GPIO_PUPDR]
    str r2,[r3,#GPIO_MODER]
    str r2,[r3,#GPIO_OTYPER]

    ldr r2,=#0xffffffff
 8000258:	ffffffff 	.word	0xffffffff

0800025c <gpio_c_get>:

  // Define our get function
  FUNCTION gpio_c_get,global

    // Load GPIOC base address in r3
    ldr r3,=#GPIOC_BASE
 800025c:	4b01      	ldr	r3, [pc, #4]	; (8000264 <gpio_c_get+0x8>)

    // Load the input pins into r0
    ldr r0,[r3,#GPIO_IDR]
 800025e:	6918      	ldr	r0, [r3, #16]

    // Branch and exchange out of subroutine 
    bx  lr
 8000260:	4770      	bx	lr
 8000262:	0000      	.short	0x0000

  // Define our get function
  FUNCTION gpio_c_get,global

    // Load GPIOC base address in r3
    ldr r3,=#GPIOC_BASE
 8000264:	40020800 	.word	0x40020800

08000268 <rcc_gpio_enable>:
   .thumb_func
   .type       rcc_gpio_enable, %function

rcc_gpio_enable:

  mov r3,#4
 8000268:	f04f 0304 	mov.w	r3, #4
  cmp r0,r3
 800026c:	4298      	cmp	r0, r3
  bgt skip_enable
 800026e:	dc08      	bgt.n	8000282 <skip_enable>
    
    ldr r3,=RCC_BASE
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <skip_enable+0x2>)
    ldr r1,[r3, #RCC_AHB1ENR]
 8000272:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#1
 8000274:	f04f 0201 	mov.w	r2, #1
    lsl r2,r0
 8000278:	fa02 f200 	lsl.w	r2, r2, r0
    orr r1,r2
 800027c:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, RCC_AHB1ENR]
 8000280:	6319      	str	r1, [r3, #48]	; 0x30

08000282 <skip_enable>:

  skip_enable:

  bx lr
 8000282:	4770      	bx	lr

  mov r3,#4
  cmp r0,r3
  bgt skip_enable
    
    ldr r3,=RCC_BASE
 8000284:	40023800 	.word	0x40023800

08000288 <adc_init>:
struct RCC  * RCC  = (struct RCC*)RCC_BASE;
struct GPIO *GPIOA = (struct GPIO*)GPIOA_BASE;
struct ADC  *ADC1  = (struct ADC*)ADC1_BASE;

void adc_init(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0

  // enable GPIOA0
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800028c:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <adc_init+0x80>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a1d      	ldr	r2, [pc, #116]	; (8000308 <adc_init+0x80>)
 8000292:	6812      	ldr	r2, [r2, #0]
 8000294:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000296:	f042 0201 	orr.w	r2, r2, #1
 800029a:	631a      	str	r2, [r3, #48]	; 0x30
  GPIOA->MODER |= ((uint32_t)(GPIO_MODE_ANALOG << ( 2 * 0))); // 0x3 is analog mode
 800029c:	4b1b      	ldr	r3, [pc, #108]	; (800030c <adc_init+0x84>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a1a      	ldr	r2, [pc, #104]	; (800030c <adc_init+0x84>)
 80002a2:	6812      	ldr	r2, [r2, #0]
 80002a4:	6812      	ldr	r2, [r2, #0]
 80002a6:	f042 0203 	orr.w	r2, r2, #3
 80002aa:	601a      	str	r2, [r3, #0]
  
 // enable APB2 for ADC1
  RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <adc_init+0x80>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a15      	ldr	r2, [pc, #84]	; (8000308 <adc_init+0x80>)
 80002b2:	6812      	ldr	r2, [r2, #0]
 80002b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80002b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80002ba:	645a      	str	r2, [r3, #68]	; 0x44

  ADC1->CR1 = 0; // defaults are fine for now
 80002bc:	4b14      	ldr	r3, [pc, #80]	; (8000310 <adc_init+0x88>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2200      	movs	r2, #0
 80002c2:	605a      	str	r2, [r3, #4]
  ADC1->CR2 = 0; // defaults are fine for now
 80002c4:	4b12      	ldr	r3, [pc, #72]	; (8000310 <adc_init+0x88>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  
  // Configure Channel/Sequence
  // SQR1[23:20] set sequence length -- 0 means one conversion 
  ADC1->SQR1 = 0;
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <adc_init+0x88>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2200      	movs	r2, #0
 80002d2:	62da      	str	r2, [r3, #44]	; 0x2c
  // NOTE: set ~10us to read 
  // ADCCLK is F_pclk2 (84MHz) / prescaler
  // default prescaler = 2, so default ADCCLK is 42MHz
  // 42MHz -> 23.9ns cycle, so we need 480 cycle sampling time
  // Set Sample Time (480 Cycles)
  ADC1->SMPR1 = 7<<18;
 80002d4:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <adc_init+0x88>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80002dc:	60da      	str	r2, [r3, #12]

  // set the channel
  ADC1->SQR2 = 0;
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <adc_init+0x88>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2200      	movs	r2, #0
 80002e4:	631a      	str	r2, [r3, #48]	; 0x30
  ADC1->SQR3 = 0; // choose ADC IN0
 80002e6:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <adc_init+0x88>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2200      	movs	r2, #0
 80002ec:	635a      	str	r2, [r3, #52]	; 0x34

  // Enable ADC
  ADC1->CR2 |= ADC_CR2_ADON;
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <adc_init+0x88>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <adc_init+0x88>)
 80002f4:	6812      	ldr	r2, [r2, #0]
 80002f6:	6892      	ldr	r2, [r2, #8]
 80002f8:	f042 0201 	orr.w	r2, r2, #1
 80002fc:	609a      	str	r2, [r3, #8]
}
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	20000000 	.word	0x20000000
 800030c:	20000004 	.word	0x20000004
 8000310:	20000008 	.word	0x20000008

08000314 <adc_start>:

void adc_start(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  // Start Regular Channel Conversion
  ADC1->CR2 |= ADC_CR2_SWSTART;
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <adc_start+0x1c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <adc_start+0x1c>)
 800031e:	6812      	ldr	r2, [r2, #0]
 8000320:	6892      	ldr	r2, [r2, #8]
 8000322:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000326:	609a      	str	r2, [r3, #8]
}
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	20000008 	.word	0x20000008

08000334 <adc_done>:

bool adc_done(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  // This bit is SET by hardware once the conversion is complete
  // it is CLEARED by software OR by reading the ADC_DR register
  return (ADC1->SR & ADC_SR_EOC);
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <adc_done+0x24>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0302 	and.w	r3, r3, #2
 8000342:	2b00      	cmp	r3, #0
 8000344:	bf14      	ite	ne
 8000346:	2301      	movne	r3, #1
 8000348:	2300      	moveq	r3, #0
 800034a:	b2db      	uxtb	r3, r3
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000008 	.word	0x20000008

0800035c <adc_get>:

uint32_t adc_get(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  // this clears the ADC_SR_EOC bit
  return ADC1->DR;
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <adc_get+0x14>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000366:	4618      	mov	r0, r3
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	20000008 	.word	0x20000008
 8000374:	00000000 	.word	0x00000000

08000378 <main>:
// Arrays for 7-seg display
unsigned char SEG7HEX[7] = {0x47, 0x2f, 0x41, 0x21, 0x03, 0x07, 0x09}; // L/R, U/D, BTH
unsigned char SEG7HEXANG[10] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10}; // angle measurements

int main()
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
    adc_init();             // Initialize ADC
 800037e:	f7ff ff83 	bl	8000288 <adc_init>
    gpio_d_init();          // Initialize Port D (LEDs)
 8000382:	f7ff ff2f 	bl	80001e4 <gpio_d_init>
    seg7_init();            // Initialize 7-segment display
 8000386:	f000 fcbd 	bl	8000d04 <seg7_init>
    SetSysClock();          //set system clock
 800038a:	f000 fb89 	bl	8000aa0 <SetSysClock>
  
    SysTick_Config(reload_value);       //configure SysTick System Timer
 800038e:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 8000392:	f000 fb6d 	bl	8000a70 <SysTick_Config>

	//loop forever
    while(1) {
        adc_start();
 8000396:	f7ff ffbd 	bl	8000314 <adc_start>
        // Poll
        while (!adc_done()) {
 800039a:	bf00      	nop
 800039c:	f7ff ffca 	bl	8000334 <adc_done>
 80003a0:	4603      	mov	r3, r0
 80003a2:	f083 0301 	eor.w	r3, r3, #1
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d1f7      	bne.n	800039c <main+0x24>
        }

        uint32_t val = adc_get();
 80003ac:	f7ff ffd6 	bl	800035c <adc_get>
 80003b0:	6078      	str	r0, [r7, #4]
        duty = 50 + ((val * 50) / 4095);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2232      	movs	r2, #50	; 0x32
 80003b6:	fb02 f203 	mul.w	r2, r2, r3
 80003ba:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <main+0x58>)
 80003bc:	fba3 1302 	umull	r1, r3, r3, r2
 80003c0:	1ad2      	subs	r2, r2, r3
 80003c2:	0852      	lsrs	r2, r2, #1
 80003c4:	4413      	add	r3, r2
 80003c6:	0adb      	lsrs	r3, r3, #11
 80003c8:	3332      	adds	r3, #50	; 0x32
 80003ca:	4a02      	ldr	r2, [pc, #8]	; (80003d4 <main+0x5c>)
 80003cc:	6013      	str	r3, [r2, #0]
    }
 80003ce:	e7e2      	b.n	8000396 <main+0x1e>
 80003d0:	00100101 	.word	0x00100101
 80003d4:	2000046c 	.word	0x2000046c

080003d8 <SysTick_Handler>:
  return 0;
}

//ISR - SysTick Interrupt Service Routine
void SysTick_Handler (void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0

    // angle step offset
    static int step_ang = 0;

    // Automatic/Manual mode detection
    if (automatic()) {
 80003dc:	f000 fc44 	bl	8000c68 <automatic>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	f000 811e 	beq.w	8000624 <SysTick_Handler+0x24c>

        // Show that both servos are in use
        seg7_put(2, SEG7HEX[4]);
 80003e8:	4b9f      	ldr	r3, [pc, #636]	; (8000668 <SysTick_Handler+0x290>)
 80003ea:	791b      	ldrb	r3, [r3, #4]
 80003ec:	2002      	movs	r0, #2
 80003ee:	4619      	mov	r1, r3
 80003f0:	f000 fcb8 	bl	8000d64 <seg7_put>
        seg7_put(1, SEG7HEX[5]);
 80003f4:	4b9c      	ldr	r3, [pc, #624]	; (8000668 <SysTick_Handler+0x290>)
 80003f6:	795b      	ldrb	r3, [r3, #5]
 80003f8:	2001      	movs	r0, #1
 80003fa:	4619      	mov	r1, r3
 80003fc:	f000 fcb2 	bl	8000d64 <seg7_put>
        seg7_put(0, SEG7HEX[6]);
 8000400:	4b99      	ldr	r3, [pc, #612]	; (8000668 <SysTick_Handler+0x290>)
 8000402:	799b      	ldrb	r3, [r3, #6]
 8000404:	2000      	movs	r0, #0
 8000406:	4619      	mov	r1, r3
 8000408:	f000 fcac 	bl	8000d64 <seg7_put>

        // Get angle number
        if (sim_duty == 75) {
 800040c:	4b97      	ldr	r3, [pc, #604]	; (800066c <SysTick_Handler+0x294>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b4b      	cmp	r3, #75	; 0x4b
 8000412:	d118      	bne.n	8000446 <SysTick_Handler+0x6e>
            // This is our half-way point therefore 0 degrees
            seg7_put(7, SEG7HEXANG[0]);
 8000414:	4b96      	ldr	r3, [pc, #600]	; (8000670 <SysTick_Handler+0x298>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2007      	movs	r0, #7
 800041a:	4619      	mov	r1, r3
 800041c:	f000 fca2 	bl	8000d64 <seg7_put>
            seg7_put(6, SEG7HEXANG[0]);
 8000420:	4b93      	ldr	r3, [pc, #588]	; (8000670 <SysTick_Handler+0x298>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2006      	movs	r0, #6
 8000426:	4619      	mov	r1, r3
 8000428:	f000 fc9c 	bl	8000d64 <seg7_put>
            seg7_put(5, SEG7HEXANG[0]);
 800042c:	4b90      	ldr	r3, [pc, #576]	; (8000670 <SysTick_Handler+0x298>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2005      	movs	r0, #5
 8000432:	4619      	mov	r1, r3
 8000434:	f000 fc96 	bl	8000d64 <seg7_put>
            seg7_put(4, SEG7HEXANG[0]);
 8000438:	4b8d      	ldr	r3, [pc, #564]	; (8000670 <SysTick_Handler+0x298>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2004      	movs	r0, #4
 800043e:	4619      	mov	r1, r3
 8000440:	f000 fc90 	bl	8000d64 <seg7_put>
 8000444:	e077      	b.n	8000536 <SysTick_Handler+0x15e>
        } else if (sim_duty >= 50 && sim_duty < 75) {
 8000446:	4b89      	ldr	r3, [pc, #548]	; (800066c <SysTick_Handler+0x294>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2b31      	cmp	r3, #49	; 0x31
 800044c:	dd38      	ble.n	80004c0 <SysTick_Handler+0xe8>
 800044e:	4b87      	ldr	r3, [pc, #540]	; (800066c <SysTick_Handler+0x294>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b4a      	cmp	r3, #74	; 0x4a
 8000454:	dc34      	bgt.n	80004c0 <SysTick_Handler+0xe8>
            // This should give us how offset from center we are in degrees (3.6 deg/ step)
            step_ang = (75 - sim_duty) * 3.6;
 8000456:	4b85      	ldr	r3, [pc, #532]	; (800066c <SysTick_Handler+0x294>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
 800045e:	4618      	mov	r0, r3
 8000460:	f000 fdec 	bl	800103c <__aeabi_i2d>
 8000464:	4602      	mov	r2, r0
 8000466:	460b      	mov	r3, r1
 8000468:	4610      	mov	r0, r2
 800046a:	4619      	mov	r1, r3
 800046c:	a37c      	add	r3, pc, #496	; (adr r3, 8000660 <SysTick_Handler+0x288>)
 800046e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000472:	f000 fe49 	bl	8001108 <__aeabi_dmul>
 8000476:	4602      	mov	r2, r0
 8000478:	460b      	mov	r3, r1
 800047a:	4610      	mov	r0, r2
 800047c:	4619      	mov	r1, r3
 800047e:	f001 f855 	bl	800152c <__aeabi_d2iz>
 8000482:	4602      	mov	r2, r0
 8000484:	4b7b      	ldr	r3, [pc, #492]	; (8000674 <SysTick_Handler+0x29c>)
 8000486:	601a      	str	r2, [r3, #0]

            // Get each decimal for the angle so we can select the proper hex value
            ang_ones = step_ang % 10; // modulus to get the one
 8000488:	4b7a      	ldr	r3, [pc, #488]	; (8000674 <SysTick_Handler+0x29c>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b7a      	ldr	r3, [pc, #488]	; (8000678 <SysTick_Handler+0x2a0>)
 800048e:	fb83 1302 	smull	r1, r3, r3, r2
 8000492:	1099      	asrs	r1, r3, #2
 8000494:	17d3      	asrs	r3, r2, #31
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	460b      	mov	r3, r1
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	440b      	add	r3, r1
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	1ad1      	subs	r1, r2, r3
 80004a2:	460a      	mov	r2, r1
 80004a4:	4b75      	ldr	r3, [pc, #468]	; (800067c <SysTick_Handler+0x2a4>)
 80004a6:	601a      	str	r2, [r3, #0]
            ang_tens = step_ang / 10; // integer division
 80004a8:	4b72      	ldr	r3, [pc, #456]	; (8000674 <SysTick_Handler+0x29c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a72      	ldr	r2, [pc, #456]	; (8000678 <SysTick_Handler+0x2a0>)
 80004ae:	fb82 1203 	smull	r1, r2, r2, r3
 80004b2:	1092      	asrs	r2, r2, #2
 80004b4:	17db      	asrs	r3, r3, #31
 80004b6:	1ad3      	subs	r3, r2, r3
 80004b8:	461a      	mov	r2, r3
 80004ba:	4b71      	ldr	r3, [pc, #452]	; (8000680 <SysTick_Handler+0x2a8>)
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	e03a      	b.n	8000536 <SysTick_Handler+0x15e>
        } else if (sim_duty > 75 && sim_duty <= 100) {
 80004c0:	4b6a      	ldr	r3, [pc, #424]	; (800066c <SysTick_Handler+0x294>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b4b      	cmp	r3, #75	; 0x4b
 80004c6:	dd36      	ble.n	8000536 <SysTick_Handler+0x15e>
 80004c8:	4b68      	ldr	r3, [pc, #416]	; (800066c <SysTick_Handler+0x294>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b64      	cmp	r3, #100	; 0x64
 80004ce:	dc32      	bgt.n	8000536 <SysTick_Handler+0x15e>
            // This should give us how offset from center we are in degrees (3.6 deg/ step)
            step_ang = (sim_duty - 75) * 3.6;
 80004d0:	4b66      	ldr	r3, [pc, #408]	; (800066c <SysTick_Handler+0x294>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3b4b      	subs	r3, #75	; 0x4b
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 fdb0 	bl	800103c <__aeabi_i2d>
 80004dc:	4602      	mov	r2, r0
 80004de:	460b      	mov	r3, r1
 80004e0:	4610      	mov	r0, r2
 80004e2:	4619      	mov	r1, r3
 80004e4:	a35e      	add	r3, pc, #376	; (adr r3, 8000660 <SysTick_Handler+0x288>)
 80004e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004ea:	f000 fe0d 	bl	8001108 <__aeabi_dmul>
 80004ee:	4602      	mov	r2, r0
 80004f0:	460b      	mov	r3, r1
 80004f2:	4610      	mov	r0, r2
 80004f4:	4619      	mov	r1, r3
 80004f6:	f001 f819 	bl	800152c <__aeabi_d2iz>
 80004fa:	4602      	mov	r2, r0
 80004fc:	4b5d      	ldr	r3, [pc, #372]	; (8000674 <SysTick_Handler+0x29c>)
 80004fe:	601a      	str	r2, [r3, #0]

            // Get each decimal for the angle so we can select the proper hex value
            ang_ones = step_ang % 10; // modulus to get the one
 8000500:	4b5c      	ldr	r3, [pc, #368]	; (8000674 <SysTick_Handler+0x29c>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b5c      	ldr	r3, [pc, #368]	; (8000678 <SysTick_Handler+0x2a0>)
 8000506:	fb83 1302 	smull	r1, r3, r3, r2
 800050a:	1099      	asrs	r1, r3, #2
 800050c:	17d3      	asrs	r3, r2, #31
 800050e:	1ac9      	subs	r1, r1, r3
 8000510:	460b      	mov	r3, r1
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	440b      	add	r3, r1
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	1ad1      	subs	r1, r2, r3
 800051a:	460a      	mov	r2, r1
 800051c:	4b57      	ldr	r3, [pc, #348]	; (800067c <SysTick_Handler+0x2a4>)
 800051e:	601a      	str	r2, [r3, #0]
            ang_tens = step_ang / 10; // integer division
 8000520:	4b54      	ldr	r3, [pc, #336]	; (8000674 <SysTick_Handler+0x29c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a54      	ldr	r2, [pc, #336]	; (8000678 <SysTick_Handler+0x2a0>)
 8000526:	fb82 1203 	smull	r1, r2, r2, r3
 800052a:	1092      	asrs	r2, r2, #2
 800052c:	17db      	asrs	r3, r3, #31
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	461a      	mov	r2, r3
 8000532:	4b53      	ldr	r3, [pc, #332]	; (8000680 <SysTick_Handler+0x2a8>)
 8000534:	601a      	str	r2, [r3, #0]
        }

        // Show the angle of the servo on 7-seg displays [7:6]
        seg7_put(7, SEG7HEXANG[ang_tens]);
 8000536:	4b52      	ldr	r3, [pc, #328]	; (8000680 <SysTick_Handler+0x2a8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a4d      	ldr	r2, [pc, #308]	; (8000670 <SysTick_Handler+0x298>)
 800053c:	5cd3      	ldrb	r3, [r2, r3]
 800053e:	2007      	movs	r0, #7
 8000540:	4619      	mov	r1, r3
 8000542:	f000 fc0f 	bl	8000d64 <seg7_put>
        seg7_put(6, SEG7HEXANG[ang_ones]);
 8000546:	4b4d      	ldr	r3, [pc, #308]	; (800067c <SysTick_Handler+0x2a4>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a49      	ldr	r2, [pc, #292]	; (8000670 <SysTick_Handler+0x298>)
 800054c:	5cd3      	ldrb	r3, [r2, r3]
 800054e:	2006      	movs	r0, #6
 8000550:	4619      	mov	r1, r3
 8000552:	f000 fc07 	bl	8000d64 <seg7_put>
        seg7_put(5, SEG7HEXANG[ang_tens]);
 8000556:	4b4a      	ldr	r3, [pc, #296]	; (8000680 <SysTick_Handler+0x2a8>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a45      	ldr	r2, [pc, #276]	; (8000670 <SysTick_Handler+0x298>)
 800055c:	5cd3      	ldrb	r3, [r2, r3]
 800055e:	2005      	movs	r0, #5
 8000560:	4619      	mov	r1, r3
 8000562:	f000 fbff 	bl	8000d64 <seg7_put>
        seg7_put(4, SEG7HEXANG[ang_ones]);
 8000566:	4b45      	ldr	r3, [pc, #276]	; (800067c <SysTick_Handler+0x2a4>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a41      	ldr	r2, [pc, #260]	; (8000670 <SysTick_Handler+0x298>)
 800056c:	5cd3      	ldrb	r3, [r2, r3]
 800056e:	2004      	movs	r0, #4
 8000570:	4619      	mov	r1, r3
 8000572:	f000 fbf7 	bl	8000d64 <seg7_put>

        // PWM based on our simulated duty cycle, and increment/decrement accordingly
        if (step == sim_duty) {
 8000576:	4b43      	ldr	r3, [pc, #268]	; (8000684 <SysTick_Handler+0x2ac>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	4b3c      	ldr	r3, [pc, #240]	; (800066c <SysTick_Handler+0x294>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	429a      	cmp	r2, r3
 8000580:	d110      	bne.n	80005a4 <SysTick_Handler+0x1cc>
            *pLEDs = *pLEDs & ~(1 << 0);
 8000582:	4b41      	ldr	r3, [pc, #260]	; (8000688 <SysTick_Handler+0x2b0>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a40      	ldr	r2, [pc, #256]	; (8000688 <SysTick_Handler+0x2b0>)
 8000588:	6812      	ldr	r2, [r2, #0]
 800058a:	6812      	ldr	r2, [r2, #0]
 800058c:	f022 0201 	bic.w	r2, r2, #1
 8000590:	601a      	str	r2, [r3, #0]
            *pLEDs = *pLEDs & ~(1 << 1);
 8000592:	4b3d      	ldr	r3, [pc, #244]	; (8000688 <SysTick_Handler+0x2b0>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a3c      	ldr	r2, [pc, #240]	; (8000688 <SysTick_Handler+0x2b0>)
 8000598:	6812      	ldr	r2, [r2, #0]
 800059a:	6812      	ldr	r2, [r2, #0]
 800059c:	f022 0202 	bic.w	r2, r2, #2
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	e039      	b.n	8000618 <SysTick_Handler+0x240>
        } else if (step == 1000) {
 80005a4:	4b37      	ldr	r3, [pc, #220]	; (8000684 <SysTick_Handler+0x2ac>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ac:	d134      	bne.n	8000618 <SysTick_Handler+0x240>
            *pLEDs = *pLEDs | (1 << 0);
 80005ae:	4b36      	ldr	r3, [pc, #216]	; (8000688 <SysTick_Handler+0x2b0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a35      	ldr	r2, [pc, #212]	; (8000688 <SysTick_Handler+0x2b0>)
 80005b4:	6812      	ldr	r2, [r2, #0]
 80005b6:	6812      	ldr	r2, [r2, #0]
 80005b8:	f042 0201 	orr.w	r2, r2, #1
 80005bc:	601a      	str	r2, [r3, #0]
            *pLEDs = *pLEDs | (1 << 1);
 80005be:	4b32      	ldr	r3, [pc, #200]	; (8000688 <SysTick_Handler+0x2b0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a31      	ldr	r2, [pc, #196]	; (8000688 <SysTick_Handler+0x2b0>)
 80005c4:	6812      	ldr	r2, [r2, #0]
 80005c6:	6812      	ldr	r2, [r2, #0]
 80005c8:	f042 0202 	orr.w	r2, r2, #2
 80005cc:	601a      	str	r2, [r3, #0]
            step = 0;
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <SysTick_Handler+0x2ac>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]

            // Check flags for increment or decrement
            if (sim_flag == 1) {
 80005d4:	4b2d      	ldr	r3, [pc, #180]	; (800068c <SysTick_Handler+0x2b4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d105      	bne.n	80005e8 <SysTick_Handler+0x210>
                sim_duty--;
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <SysTick_Handler+0x294>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	4a22      	ldr	r2, [pc, #136]	; (800066c <SysTick_Handler+0x294>)
 80005e4:	6013      	str	r3, [r2, #0]
 80005e6:	e008      	b.n	80005fa <SysTick_Handler+0x222>
            } else if (sim_flag == 0) {
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SysTick_Handler+0x2b4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d104      	bne.n	80005fa <SysTick_Handler+0x222>
                sim_duty++;
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <SysTick_Handler+0x294>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	4a1d      	ldr	r2, [pc, #116]	; (800066c <SysTick_Handler+0x294>)
 80005f8:	6013      	str	r3, [r2, #0]
            }

            // Set flags for increment/decrement based on position
            if (sim_duty == 100) {
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <SysTick_Handler+0x294>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b64      	cmp	r3, #100	; 0x64
 8000600:	d103      	bne.n	800060a <SysTick_Handler+0x232>
                sim_flag = 1;
 8000602:	4b22      	ldr	r3, [pc, #136]	; (800068c <SysTick_Handler+0x2b4>)
 8000604:	2201      	movs	r2, #1
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	e006      	b.n	8000618 <SysTick_Handler+0x240>
            } else if (sim_duty == 50) {
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <SysTick_Handler+0x294>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b32      	cmp	r3, #50	; 0x32
 8000610:	d102      	bne.n	8000618 <SysTick_Handler+0x240>
                sim_flag = 0;
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <SysTick_Handler+0x2b4>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
            }
        }
        step++;
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <SysTick_Handler+0x2ac>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	3301      	adds	r3, #1
 800061e:	4a19      	ldr	r2, [pc, #100]	; (8000684 <SysTick_Handler+0x2ac>)
 8000620:	6013      	str	r3, [r2, #0]
 8000622:	e20e      	b.n	8000a42 <SysTick_Handler+0x66a>
    } else {
        // Check if both switches are on and display 'btH' but don't do anything
        if (sw_get_LRservo() && sw_get_UDservo()) {
 8000624:	f000 fb06 	bl	8000c34 <sw_get_LRservo>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d030      	beq.n	8000690 <SysTick_Handler+0x2b8>
 800062e:	f000 fb0d 	bl	8000c4c <sw_get_UDservo>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d02b      	beq.n	8000690 <SysTick_Handler+0x2b8>
            seg7_put(2, SEG7HEX[4]);
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <SysTick_Handler+0x290>)
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	2002      	movs	r0, #2
 800063e:	4619      	mov	r1, r3
 8000640:	f000 fb90 	bl	8000d64 <seg7_put>
            seg7_put(1, SEG7HEX[5]);
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <SysTick_Handler+0x290>)
 8000646:	795b      	ldrb	r3, [r3, #5]
 8000648:	2001      	movs	r0, #1
 800064a:	4619      	mov	r1, r3
 800064c:	f000 fb8a 	bl	8000d64 <seg7_put>
            seg7_put(0, SEG7HEX[6]);
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <SysTick_Handler+0x290>)
 8000652:	799b      	ldrb	r3, [r3, #6]
 8000654:	2000      	movs	r0, #0
 8000656:	4619      	mov	r1, r3
 8000658:	f000 fb84 	bl	8000d64 <seg7_put>
 800065c:	e1f1      	b.n	8000a42 <SysTick_Handler+0x66a>
 800065e:	bf00      	nop
 8000660:	cccccccd 	.word	0xcccccccd
 8000664:	400ccccc 	.word	0x400ccccc
 8000668:	20000010 	.word	0x20000010
 800066c:	20000024 	.word	0x20000024
 8000670:	20000018 	.word	0x20000018
 8000674:	20000478 	.word	0x20000478
 8000678:	66666667 	.word	0x66666667
 800067c:	20000474 	.word	0x20000474
 8000680:	20000470 	.word	0x20000470
 8000684:	2000047c 	.word	0x2000047c
 8000688:	2000000c 	.word	0x2000000c
 800068c:	20000480 	.word	0x20000480
          // Control Left/Right servo
        } else if (sw_get_LRservo()) {
 8000690:	f000 fad0 	bl	8000c34 <sw_get_LRservo>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	f000 80cf 	beq.w	800083a <SysTick_Handler+0x462>
            // Show the servo that's been used in the 7-seg display
            seg7_put(2, 0x7f); // turn off 7-seg display [2]
 800069c:	2002      	movs	r0, #2
 800069e:	217f      	movs	r1, #127	; 0x7f
 80006a0:	f000 fb60 	bl	8000d64 <seg7_put>
            seg7_put(1, SEG7HEX[0]);
 80006a4:	4b9a      	ldr	r3, [pc, #616]	; (8000910 <SysTick_Handler+0x538>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2001      	movs	r0, #1
 80006aa:	4619      	mov	r1, r3
 80006ac:	f000 fb5a 	bl	8000d64 <seg7_put>
            seg7_put(0, SEG7HEX[1]);
 80006b0:	4b97      	ldr	r3, [pc, #604]	; (8000910 <SysTick_Handler+0x538>)
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	2000      	movs	r0, #0
 80006b6:	4619      	mov	r1, r3
 80006b8:	f000 fb54 	bl	8000d64 <seg7_put>

            // Get angle number
            if (duty == 75) {
 80006bc:	4b95      	ldr	r3, [pc, #596]	; (8000914 <SysTick_Handler+0x53c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b4b      	cmp	r3, #75	; 0x4b
 80006c2:	d10c      	bne.n	80006de <SysTick_Handler+0x306>
                // This is our half-way point therefore 0 degrees
                seg7_put(5, SEG7HEXANG[0]);
 80006c4:	4b94      	ldr	r3, [pc, #592]	; (8000918 <SysTick_Handler+0x540>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2005      	movs	r0, #5
 80006ca:	4619      	mov	r1, r3
 80006cc:	f000 fb4a 	bl	8000d64 <seg7_put>
                seg7_put(4, SEG7HEXANG[0]);
 80006d0:	4b91      	ldr	r3, [pc, #580]	; (8000918 <SysTick_Handler+0x540>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2004      	movs	r0, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	f000 fb44 	bl	8000d64 <seg7_put>
 80006dc:	e077      	b.n	80007ce <SysTick_Handler+0x3f6>
            } else if (duty >= 50 && duty < 75) {
 80006de:	4b8d      	ldr	r3, [pc, #564]	; (8000914 <SysTick_Handler+0x53c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b31      	cmp	r3, #49	; 0x31
 80006e4:	d938      	bls.n	8000758 <SysTick_Handler+0x380>
 80006e6:	4b8b      	ldr	r3, [pc, #556]	; (8000914 <SysTick_Handler+0x53c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b4a      	cmp	r3, #74	; 0x4a
 80006ec:	d834      	bhi.n	8000758 <SysTick_Handler+0x380>
                // This should give us how offset from center we are in degrees (3.6 deg/ step)
                step_ang = (75 - duty) * 3.6;
 80006ee:	4b89      	ldr	r3, [pc, #548]	; (8000914 <SysTick_Handler+0x53c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fc90 	bl	800101c <__aeabi_ui2d>
 80006fc:	4602      	mov	r2, r0
 80006fe:	460b      	mov	r3, r1
 8000700:	4610      	mov	r0, r2
 8000702:	4619      	mov	r1, r3
 8000704:	a380      	add	r3, pc, #512	; (adr r3, 8000908 <SysTick_Handler+0x530>)
 8000706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800070a:	f000 fcfd 	bl	8001108 <__aeabi_dmul>
 800070e:	4602      	mov	r2, r0
 8000710:	460b      	mov	r3, r1
 8000712:	4610      	mov	r0, r2
 8000714:	4619      	mov	r1, r3
 8000716:	f000 ff09 	bl	800152c <__aeabi_d2iz>
 800071a:	4602      	mov	r2, r0
 800071c:	4b7f      	ldr	r3, [pc, #508]	; (800091c <SysTick_Handler+0x544>)
 800071e:	601a      	str	r2, [r3, #0]

                // Get each decimal for the angle so we can select the proper hex value
                ang_ones = step_ang % 10; // modulus to get the one
 8000720:	4b7e      	ldr	r3, [pc, #504]	; (800091c <SysTick_Handler+0x544>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b7e      	ldr	r3, [pc, #504]	; (8000920 <SysTick_Handler+0x548>)
 8000726:	fb83 1302 	smull	r1, r3, r3, r2
 800072a:	1099      	asrs	r1, r3, #2
 800072c:	17d3      	asrs	r3, r2, #31
 800072e:	1ac9      	subs	r1, r1, r3
 8000730:	460b      	mov	r3, r1
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	440b      	add	r3, r1
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	1ad1      	subs	r1, r2, r3
 800073a:	460a      	mov	r2, r1
 800073c:	4b79      	ldr	r3, [pc, #484]	; (8000924 <SysTick_Handler+0x54c>)
 800073e:	601a      	str	r2, [r3, #0]
                ang_tens = step_ang / 10; // integer division
 8000740:	4b76      	ldr	r3, [pc, #472]	; (800091c <SysTick_Handler+0x544>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a76      	ldr	r2, [pc, #472]	; (8000920 <SysTick_Handler+0x548>)
 8000746:	fb82 1203 	smull	r1, r2, r2, r3
 800074a:	1092      	asrs	r2, r2, #2
 800074c:	17db      	asrs	r3, r3, #31
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	461a      	mov	r2, r3
 8000752:	4b75      	ldr	r3, [pc, #468]	; (8000928 <SysTick_Handler+0x550>)
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	e03a      	b.n	80007ce <SysTick_Handler+0x3f6>
            } else if (duty > 75 && duty <= 100) {
 8000758:	4b6e      	ldr	r3, [pc, #440]	; (8000914 <SysTick_Handler+0x53c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b4b      	cmp	r3, #75	; 0x4b
 800075e:	d936      	bls.n	80007ce <SysTick_Handler+0x3f6>
 8000760:	4b6c      	ldr	r3, [pc, #432]	; (8000914 <SysTick_Handler+0x53c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b64      	cmp	r3, #100	; 0x64
 8000766:	d832      	bhi.n	80007ce <SysTick_Handler+0x3f6>
                // This should give us how offset from center we are in degrees (3.6 deg/ step)
                step_ang = (duty - 75) * 3.6;
 8000768:	4b6a      	ldr	r3, [pc, #424]	; (8000914 <SysTick_Handler+0x53c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3b4b      	subs	r3, #75	; 0x4b
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fc54 	bl	800101c <__aeabi_ui2d>
 8000774:	4602      	mov	r2, r0
 8000776:	460b      	mov	r3, r1
 8000778:	4610      	mov	r0, r2
 800077a:	4619      	mov	r1, r3
 800077c:	a362      	add	r3, pc, #392	; (adr r3, 8000908 <SysTick_Handler+0x530>)
 800077e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000782:	f000 fcc1 	bl	8001108 <__aeabi_dmul>
 8000786:	4602      	mov	r2, r0
 8000788:	460b      	mov	r3, r1
 800078a:	4610      	mov	r0, r2
 800078c:	4619      	mov	r1, r3
 800078e:	f000 fecd 	bl	800152c <__aeabi_d2iz>
 8000792:	4602      	mov	r2, r0
 8000794:	4b61      	ldr	r3, [pc, #388]	; (800091c <SysTick_Handler+0x544>)
 8000796:	601a      	str	r2, [r3, #0]

                // Get each decimal for the angle so we can select the proper hex value
                ang_ones = step_ang % 10; // modulus to get the one
 8000798:	4b60      	ldr	r3, [pc, #384]	; (800091c <SysTick_Handler+0x544>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b60      	ldr	r3, [pc, #384]	; (8000920 <SysTick_Handler+0x548>)
 800079e:	fb83 1302 	smull	r1, r3, r3, r2
 80007a2:	1099      	asrs	r1, r3, #2
 80007a4:	17d3      	asrs	r3, r2, #31
 80007a6:	1ac9      	subs	r1, r1, r3
 80007a8:	460b      	mov	r3, r1
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	440b      	add	r3, r1
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	1ad1      	subs	r1, r2, r3
 80007b2:	460a      	mov	r2, r1
 80007b4:	4b5b      	ldr	r3, [pc, #364]	; (8000924 <SysTick_Handler+0x54c>)
 80007b6:	601a      	str	r2, [r3, #0]
                ang_tens = step_ang / 10; // integer division
 80007b8:	4b58      	ldr	r3, [pc, #352]	; (800091c <SysTick_Handler+0x544>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a58      	ldr	r2, [pc, #352]	; (8000920 <SysTick_Handler+0x548>)
 80007be:	fb82 1203 	smull	r1, r2, r2, r3
 80007c2:	1092      	asrs	r2, r2, #2
 80007c4:	17db      	asrs	r3, r3, #31
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b57      	ldr	r3, [pc, #348]	; (8000928 <SysTick_Handler+0x550>)
 80007cc:	601a      	str	r2, [r3, #0]
            }

            // Show the angle of the servo on 7-seg displays [5:4]
            seg7_put(5, SEG7HEXANG[ang_tens]);
 80007ce:	4b56      	ldr	r3, [pc, #344]	; (8000928 <SysTick_Handler+0x550>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a51      	ldr	r2, [pc, #324]	; (8000918 <SysTick_Handler+0x540>)
 80007d4:	5cd3      	ldrb	r3, [r2, r3]
 80007d6:	2005      	movs	r0, #5
 80007d8:	4619      	mov	r1, r3
 80007da:	f000 fac3 	bl	8000d64 <seg7_put>
            seg7_put(4, SEG7HEXANG[ang_ones]);
 80007de:	4b51      	ldr	r3, [pc, #324]	; (8000924 <SysTick_Handler+0x54c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a4d      	ldr	r2, [pc, #308]	; (8000918 <SysTick_Handler+0x540>)
 80007e4:	5cd3      	ldrb	r3, [r2, r3]
 80007e6:	2004      	movs	r0, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	f000 fabb 	bl	8000d64 <seg7_put>

            // PWM based on duty cycle provided by ADC count
            if (step == duty) {
 80007ee:	4b4f      	ldr	r3, [pc, #316]	; (800092c <SysTick_Handler+0x554>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b47      	ldr	r3, [pc, #284]	; (8000914 <SysTick_Handler+0x53c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d108      	bne.n	800080e <SysTick_Handler+0x436>
                *pLEDs = *pLEDs & ~(1 << 0);
 80007fc:	4b4c      	ldr	r3, [pc, #304]	; (8000930 <SysTick_Handler+0x558>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a4b      	ldr	r2, [pc, #300]	; (8000930 <SysTick_Handler+0x558>)
 8000802:	6812      	ldr	r2, [r2, #0]
 8000804:	6812      	ldr	r2, [r2, #0]
 8000806:	f022 0201 	bic.w	r2, r2, #1
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e00f      	b.n	800082e <SysTick_Handler+0x456>
            } else if (step == 1000) {
 800080e:	4b47      	ldr	r3, [pc, #284]	; (800092c <SysTick_Handler+0x554>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000816:	d10a      	bne.n	800082e <SysTick_Handler+0x456>
                *pLEDs = *pLEDs | (1 << 0);
 8000818:	4b45      	ldr	r3, [pc, #276]	; (8000930 <SysTick_Handler+0x558>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a44      	ldr	r2, [pc, #272]	; (8000930 <SysTick_Handler+0x558>)
 800081e:	6812      	ldr	r2, [r2, #0]
 8000820:	6812      	ldr	r2, [r2, #0]
 8000822:	f042 0201 	orr.w	r2, r2, #1
 8000826:	601a      	str	r2, [r3, #0]
                step = 0;
 8000828:	4b40      	ldr	r3, [pc, #256]	; (800092c <SysTick_Handler+0x554>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
            }
            step++;
 800082e:	4b3f      	ldr	r3, [pc, #252]	; (800092c <SysTick_Handler+0x554>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	3301      	adds	r3, #1
 8000834:	4a3d      	ldr	r2, [pc, #244]	; (800092c <SysTick_Handler+0x554>)
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	e103      	b.n	8000a42 <SysTick_Handler+0x66a>
          // Control Up/Down servo
        } else if (sw_get_UDservo()) {
 800083a:	f000 fa07 	bl	8000c4c <sw_get_UDservo>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	f000 80e8 	beq.w	8000a16 <SysTick_Handler+0x63e>
            // Show the servo that's been used in the 7-seg display
            seg7_put(2, 0x7f); // turn off 7-seg display [2]
 8000846:	2002      	movs	r0, #2
 8000848:	217f      	movs	r1, #127	; 0x7f
 800084a:	f000 fa8b 	bl	8000d64 <seg7_put>
            seg7_put(1, SEG7HEX[2]);
 800084e:	4b30      	ldr	r3, [pc, #192]	; (8000910 <SysTick_Handler+0x538>)
 8000850:	789b      	ldrb	r3, [r3, #2]
 8000852:	2001      	movs	r0, #1
 8000854:	4619      	mov	r1, r3
 8000856:	f000 fa85 	bl	8000d64 <seg7_put>
            seg7_put(0, SEG7HEX[3]);
 800085a:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <SysTick_Handler+0x538>)
 800085c:	78db      	ldrb	r3, [r3, #3]
 800085e:	2000      	movs	r0, #0
 8000860:	4619      	mov	r1, r3
 8000862:	f000 fa7f 	bl	8000d64 <seg7_put>

            // Get angle number
            if (duty == 75) {
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <SysTick_Handler+0x53c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b4b      	cmp	r3, #75	; 0x4b
 800086c:	d10c      	bne.n	8000888 <SysTick_Handler+0x4b0>
                // This is our half-way point therefore 0 degrees
                seg7_put(5, SEG7HEXANG[0]);
 800086e:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <SysTick_Handler+0x540>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2005      	movs	r0, #5
 8000874:	4619      	mov	r1, r3
 8000876:	f000 fa75 	bl	8000d64 <seg7_put>
                seg7_put(4, SEG7HEXANG[0]);
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <SysTick_Handler+0x540>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2004      	movs	r0, #4
 8000880:	4619      	mov	r1, r3
 8000882:	f000 fa6f 	bl	8000d64 <seg7_put>
 8000886:	e090      	b.n	80009aa <SysTick_Handler+0x5d2>
            } else if (duty >= 50 && duty < 75) {
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <SysTick_Handler+0x53c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b31      	cmp	r3, #49	; 0x31
 800088e:	d951      	bls.n	8000934 <SysTick_Handler+0x55c>
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <SysTick_Handler+0x53c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b4a      	cmp	r3, #74	; 0x4a
 8000896:	d84d      	bhi.n	8000934 <SysTick_Handler+0x55c>
                // This should give us how offset from center we are in degrees (3.6 deg/ step)
                step_ang = (75 - duty) * 3.6;
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <SysTick_Handler+0x53c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 fbbb 	bl	800101c <__aeabi_ui2d>
 80008a6:	4602      	mov	r2, r0
 80008a8:	460b      	mov	r3, r1
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	a316      	add	r3, pc, #88	; (adr r3, 8000908 <SysTick_Handler+0x530>)
 80008b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b4:	f000 fc28 	bl	8001108 <__aeabi_dmul>
 80008b8:	4602      	mov	r2, r0
 80008ba:	460b      	mov	r3, r1
 80008bc:	4610      	mov	r0, r2
 80008be:	4619      	mov	r1, r3
 80008c0:	f000 fe34 	bl	800152c <__aeabi_d2iz>
 80008c4:	4602      	mov	r2, r0
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <SysTick_Handler+0x544>)
 80008c8:	601a      	str	r2, [r3, #0]

                // Get each decimal for the angle so we can select the proper hex value
                ang_ones = step_ang % 10; // modulus to get the one
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <SysTick_Handler+0x544>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <SysTick_Handler+0x548>)
 80008d0:	fb83 1302 	smull	r1, r3, r3, r2
 80008d4:	1099      	asrs	r1, r3, #2
 80008d6:	17d3      	asrs	r3, r2, #31
 80008d8:	1ac9      	subs	r1, r1, r3
 80008da:	460b      	mov	r3, r1
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	440b      	add	r3, r1
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	1ad1      	subs	r1, r2, r3
 80008e4:	460a      	mov	r2, r1
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <SysTick_Handler+0x54c>)
 80008e8:	601a      	str	r2, [r3, #0]
                ang_tens = step_ang / 10; // integer division
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <SysTick_Handler+0x544>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <SysTick_Handler+0x548>)
 80008f0:	fb82 1203 	smull	r1, r2, r2, r3
 80008f4:	1092      	asrs	r2, r2, #2
 80008f6:	17db      	asrs	r3, r3, #31
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <SysTick_Handler+0x550>)
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	e053      	b.n	80009aa <SysTick_Handler+0x5d2>
 8000902:	bf00      	nop
 8000904:	f3af 8000 	nop.w
 8000908:	cccccccd 	.word	0xcccccccd
 800090c:	400ccccc 	.word	0x400ccccc
 8000910:	20000010 	.word	0x20000010
 8000914:	2000046c 	.word	0x2000046c
 8000918:	20000018 	.word	0x20000018
 800091c:	20000478 	.word	0x20000478
 8000920:	66666667 	.word	0x66666667
 8000924:	20000474 	.word	0x20000474
 8000928:	20000470 	.word	0x20000470
 800092c:	2000047c 	.word	0x2000047c
 8000930:	2000000c 	.word	0x2000000c
            } else if (duty > 75 && duty <= 100) {
 8000934:	4b46      	ldr	r3, [pc, #280]	; (8000a50 <SysTick_Handler+0x678>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b4b      	cmp	r3, #75	; 0x4b
 800093a:	d936      	bls.n	80009aa <SysTick_Handler+0x5d2>
 800093c:	4b44      	ldr	r3, [pc, #272]	; (8000a50 <SysTick_Handler+0x678>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b64      	cmp	r3, #100	; 0x64
 8000942:	d832      	bhi.n	80009aa <SysTick_Handler+0x5d2>
                // This should give us how offset from center we are in degrees (3.6 deg/ step)
                step_ang = (duty - 75) * 3.6;
 8000944:	4b42      	ldr	r3, [pc, #264]	; (8000a50 <SysTick_Handler+0x678>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3b4b      	subs	r3, #75	; 0x4b
 800094a:	4618      	mov	r0, r3
 800094c:	f000 fb66 	bl	800101c <__aeabi_ui2d>
 8000950:	4602      	mov	r2, r0
 8000952:	460b      	mov	r3, r1
 8000954:	4610      	mov	r0, r2
 8000956:	4619      	mov	r1, r3
 8000958:	a33b      	add	r3, pc, #236	; (adr r3, 8000a48 <SysTick_Handler+0x670>)
 800095a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800095e:	f000 fbd3 	bl	8001108 <__aeabi_dmul>
 8000962:	4602      	mov	r2, r0
 8000964:	460b      	mov	r3, r1
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	f000 fddf 	bl	800152c <__aeabi_d2iz>
 800096e:	4602      	mov	r2, r0
 8000970:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <SysTick_Handler+0x67c>)
 8000972:	601a      	str	r2, [r3, #0]

                // Get each decimal for the angle so we can select the proper hex value
                ang_ones = step_ang % 10; // modulus to get the one
 8000974:	4b37      	ldr	r3, [pc, #220]	; (8000a54 <SysTick_Handler+0x67c>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b37      	ldr	r3, [pc, #220]	; (8000a58 <SysTick_Handler+0x680>)
 800097a:	fb83 1302 	smull	r1, r3, r3, r2
 800097e:	1099      	asrs	r1, r3, #2
 8000980:	17d3      	asrs	r3, r2, #31
 8000982:	1ac9      	subs	r1, r1, r3
 8000984:	460b      	mov	r3, r1
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	440b      	add	r3, r1
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	1ad1      	subs	r1, r2, r3
 800098e:	460a      	mov	r2, r1
 8000990:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <SysTick_Handler+0x684>)
 8000992:	601a      	str	r2, [r3, #0]
                ang_tens = step_ang / 10; // integer division
 8000994:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <SysTick_Handler+0x67c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <SysTick_Handler+0x680>)
 800099a:	fb82 1203 	smull	r1, r2, r2, r3
 800099e:	1092      	asrs	r2, r2, #2
 80009a0:	17db      	asrs	r3, r3, #31
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <SysTick_Handler+0x688>)
 80009a8:	601a      	str	r2, [r3, #0]
            }

            // Show the angle of the servo on 7-seg displays [7:6]
            seg7_put(7, SEG7HEXANG[ang_tens]);
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <SysTick_Handler+0x688>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a2d      	ldr	r2, [pc, #180]	; (8000a64 <SysTick_Handler+0x68c>)
 80009b0:	5cd3      	ldrb	r3, [r2, r3]
 80009b2:	2007      	movs	r0, #7
 80009b4:	4619      	mov	r1, r3
 80009b6:	f000 f9d5 	bl	8000d64 <seg7_put>
            seg7_put(6, SEG7HEXANG[ang_ones]);
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <SysTick_Handler+0x684>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a29      	ldr	r2, [pc, #164]	; (8000a64 <SysTick_Handler+0x68c>)
 80009c0:	5cd3      	ldrb	r3, [r2, r3]
 80009c2:	2006      	movs	r0, #6
 80009c4:	4619      	mov	r1, r3
 80009c6:	f000 f9cd 	bl	8000d64 <seg7_put>

            // PWM based on duty cycle provided by ADC count
            if (step == duty) {
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <SysTick_Handler+0x690>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <SysTick_Handler+0x678>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d108      	bne.n	80009ea <SysTick_Handler+0x612>
                *pLEDs = *pLEDs & ~(1 << 1);
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <SysTick_Handler+0x694>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <SysTick_Handler+0x694>)
 80009de:	6812      	ldr	r2, [r2, #0]
 80009e0:	6812      	ldr	r2, [r2, #0]
 80009e2:	f022 0202 	bic.w	r2, r2, #2
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	e00f      	b.n	8000a0a <SysTick_Handler+0x632>
            } else if (step == 1000) {
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <SysTick_Handler+0x690>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009f2:	d10a      	bne.n	8000a0a <SysTick_Handler+0x632>
                *pLEDs = *pLEDs | (1 << 1);
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <SysTick_Handler+0x694>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <SysTick_Handler+0x694>)
 80009fa:	6812      	ldr	r2, [r2, #0]
 80009fc:	6812      	ldr	r2, [r2, #0]
 80009fe:	f042 0202 	orr.w	r2, r2, #2
 8000a02:	601a      	str	r2, [r3, #0]
                step = 0;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <SysTick_Handler+0x690>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
            }
            step++;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <SysTick_Handler+0x690>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <SysTick_Handler+0x690>)
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	e015      	b.n	8000a42 <SysTick_Handler+0x66a>
        } else if (!sw_get_UDservo() && !sw_get_LRservo()) {
 8000a16:	f000 f919 	bl	8000c4c <sw_get_UDservo>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d110      	bne.n	8000a42 <SysTick_Handler+0x66a>
 8000a20:	f000 f908 	bl	8000c34 <sw_get_LRservo>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10b      	bne.n	8000a42 <SysTick_Handler+0x66a>
            // if no switch is on then turn off "servo in use" displays
            seg7_put(2, 0x7f);
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	217f      	movs	r1, #127	; 0x7f
 8000a2e:	f000 f999 	bl	8000d64 <seg7_put>
            seg7_put(1, 0x7f);
 8000a32:	2001      	movs	r0, #1
 8000a34:	217f      	movs	r1, #127	; 0x7f
 8000a36:	f000 f995 	bl	8000d64 <seg7_put>
            seg7_put(0, 0x7f);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	217f      	movs	r1, #127	; 0x7f
 8000a3e:	f000 f991 	bl	8000d64 <seg7_put>
        }
    }
}
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	f3af 8000 	nop.w
 8000a48:	cccccccd 	.word	0xcccccccd
 8000a4c:	400ccccc 	.word	0x400ccccc
 8000a50:	2000046c 	.word	0x2000046c
 8000a54:	20000478 	.word	0x20000478
 8000a58:	66666667 	.word	0x66666667
 8000a5c:	20000474 	.word	0x20000474
 8000a60:	20000470 	.word	0x20000470
 8000a64:	20000018 	.word	0x20000018
 8000a68:	2000047c 	.word	0x2000047c
 8000a6c:	2000000c 	.word	0x2000000c

08000a70 <SysTick_Config>:
    .thumb_func
    .type	SysTick_Config, %function

SysTick_Config:

  push {r4,r5,r6,r7,lr}
 8000a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 

/* set reload register */

    mov r4,r0
 8000a72:	4604      	mov	r4, r0

    ldr r7,=#SYST_BASE
 8000a74:	4f07      	ldr	r7, [pc, #28]	; (8000a94 <SysTick_Config_End+0x8>)
    
    ldr r5,=#SYST_RVR_MASK
 8000a76:	4d08      	ldr	r5, [pc, #32]	; (8000a98 <SysTick_Config_End+0xc>)
    and r4,r5
 8000a78:	ea04 0405 	and.w	r4, r4, r5
    sub r4,#1
 8000a7c:	f1a4 0401 	sub.w	r4, r4, #1
    str r4,[r7,#SYST_RVR]
 8000a80:	607c      	str	r4, [r7, #4]

/* Load the SysTick Counter Value */

    mov r4,#0
 8000a82:	f04f 0400 	mov.w	r4, #0
    str r4,[r7,SYST_CVR]
 8000a86:	60bc      	str	r4, [r7, #8]

/* Use processor clock as clock source, Enable SysTick IRQ, and enable SysTick Timer */
    
    ldr r4,=#(SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE)
 8000a88:	4c04      	ldr	r4, [pc, #16]	; (8000a9c <SysTick_Config_End+0x10>)
    str r4,[r7,SYST_CSR]
 8000a8a:	603c      	str	r4, [r7, #0]

08000a8c <SysTick_Config_End>:

//   return (0);                                                  /* Function successful */

  SysTick_Config_End:

    pop {r4,r5,r6,r7,lr}
 8000a8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    
    bx lr
 8000a90:	4770      	bx	lr
 8000a92:	0000      	.short	0x0000

/* set reload register */

    mov r4,r0

    ldr r7,=#SYST_BASE
 8000a94:	e000e010 	.word	0xe000e010
    
    ldr r5,=#SYST_RVR_MASK
 8000a98:	00ffffff 	.word	0x00ffffff
    mov r4,#0
    str r4,[r7,SYST_CVR]

/* Use processor clock as clock source, Enable SysTick IRQ, and enable SysTick Timer */
    
    ldr r4,=#(SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE)
 8000a9c:	00000007 	.word	0x00000007

08000aa0 <SetSysClock>:

  /******************************************************************************/
  /*            PLL (clocked by HSE) used as System clock source                */
  /******************************************************************************/

  push {r4,r5,r6,r7,lr}
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}

  ldr r7,=#RCC_BASE
 8000aa2:	4f26      	ldr	r7, [pc, #152]	; (8000b3c <fail_startup+0x4>)

    /* Enable HSE */
  
    ldr r4,[r7,#RCC_CR]
 8000aa4:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#RCC_CR_HSEON
 8000aa6:	4d26      	ldr	r5, [pc, #152]	; (8000b40 <fail_startup+0x8>)
    orr r4,r5
 8000aa8:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CR]
 8000aac:	603c      	str	r4, [r7, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */

    ldr r3,=#0x500
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <fail_startup+0xc>)

08000ab0 <Wait_HSE_Ready>:
  
    Wait_HSE_Ready:

      subs r3,#1
 8000ab0:	3b01      	subs	r3, #1
      beq  fail_startup
 8000ab2:	d041      	beq.n	8000b38 <fail_startup>
    
      ldr  r4,[r7,#RCC_CR]
 8000ab4:	683c      	ldr	r4, [r7, #0]
      ldr  r5,=#RCC_CR_HSERDY
 8000ab6:	4d24      	ldr	r5, [pc, #144]	; (8000b48 <fail_startup+0x10>)
      ands r4,r5
 8000ab8:	402c      	ands	r4, r5
      beq  Wait_HSE_Ready
 8000aba:	d0f9      	beq.n	8000ab0 <Wait_HSE_Ready>

      /* Enable high performance mode, System frequency up to 168 MHz */
    
    ldr r4,[r7,#RCC_APB1ENR]
 8000abc:	6c3c      	ldr	r4, [r7, #64]	; 0x40
    ldr r5,=#RCC_APB1ENR_PWREN
 8000abe:	4d23      	ldr	r5, [pc, #140]	; (8000b4c <fail_startup+0x14>)
    orr r4,r5
 8000ac0:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_APB1ENR]
 8000ac4:	643c      	str	r4, [r7, #64]	; 0x40
    

  ldr r7,=#PWR_BASE
 8000ac6:	4f22      	ldr	r7, [pc, #136]	; (8000b50 <fail_startup+0x18>)
    
    ldr r4,[r7,#PWR_CR]
 8000ac8:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#PWR_CR_PMODE
 8000aca:	4d22      	ldr	r5, [pc, #136]	; (8000b54 <fail_startup+0x1c>)
    orr r4,r5
 8000acc:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#PWR_CR]
 8000ad0:	603c      	str	r4, [r7, #0]

  ldr r7,=#RCC_BASE
 8000ad2:	4f1a      	ldr	r7, [pc, #104]	; (8000b3c <fail_startup+0x4>)
    
    /* HCLK = SYSCLK / 1*/

    ldr r4,[r7,#RCC_CFGR]
 8000ad4:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_HPRE_DIV1
 8000ad6:	4d20      	ldr	r5, [pc, #128]	; (8000b58 <fail_startup+0x20>)
    orr r4,r5
 8000ad8:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000adc:	60bc      	str	r4, [r7, #8]
    
    /* PCLK2 = HCLK / 2*/
    
    ldr r4,[r7,#RCC_CFGR]
 8000ade:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_PPRE2_DIV2
 8000ae0:	4d1e      	ldr	r5, [pc, #120]	; (8000b5c <fail_startup+0x24>)
    orr r4,r5
 8000ae2:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000ae6:	60bc      	str	r4, [r7, #8]
    
    /* PCLK1 = HCLK / 4*/

    ldr r4,[r7,#RCC_CFGR]
 8000ae8:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_PPRE1_DIV4
 8000aea:	4d1d      	ldr	r5, [pc, #116]	; (8000b60 <fail_startup+0x28>)
    orr r4,r5
 8000aec:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000af0:	60bc      	str	r4, [r7, #8]
    
    /* Configure the main PLL */

    ldr r4,=#( PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) )              
 8000af2:	4c1c      	ldr	r4, [pc, #112]	; (8000b64 <fail_startup+0x2c>)
    str r4,[r7,#RCC_PLLCFGR]
 8000af4:	607c      	str	r4, [r7, #4]
    
    /* Enable the main PLL */

    ldr r4,[r7,#RCC_CR]
 8000af6:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#RCC_CR_PLLON
 8000af8:	4d1b      	ldr	r5, [pc, #108]	; (8000b68 <fail_startup+0x30>)
    orr r4,r5
 8000afa:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CR]
 8000afe:	603c      	str	r4, [r7, #0]

08000b00 <Wait_PLL_Ready>:
    
    
    Wait_PLL_Ready:
      ldr r4,[r7,#RCC_CR]
 8000b00:	683c      	ldr	r4, [r7, #0]
      ldr r5,=#RCC_CR_PLLRDY
 8000b02:	4d1a      	ldr	r5, [pc, #104]	; (8000b6c <fail_startup+0x34>)
      ands r4,r5
 8000b04:	402c      	ands	r4, r5
      beq Wait_PLL_Ready
 8000b06:	d0fb      	beq.n	8000b00 <Wait_PLL_Ready>
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */

  ldr r7,=#FLASH_R_BASE   
 8000b08:	4f19      	ldr	r7, [pc, #100]	; (8000b70 <fail_startup+0x38>)

    ldr r4,=#(FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS)
 8000b0a:	4c1a      	ldr	r4, [pc, #104]	; (8000b74 <fail_startup+0x3c>)
    str r4,[r7,#FLASH_ACR]
 8000b0c:	603c      	str	r4, [r7, #0]

  ldr r7,=#RCC_BASE
 8000b0e:	4f0b      	ldr	r7, [pc, #44]	; (8000b3c <fail_startup+0x4>)
  
    /* Select the main PLL as system clock source */
    
    ldr r4,[r7,#RCC_CFGR]
 8000b10:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#~(RCC_CFGR_SW)
 8000b12:	4d19      	ldr	r5, [pc, #100]	; (8000b78 <fail_startup+0x40>)
    and r4,r5
 8000b14:	ea04 0405 	and.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000b18:	60bc      	str	r4, [r7, #8]

    ldr r4,[r7,#RCC_CFGR]
 8000b1a:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_SW_PLL
 8000b1c:	4d17      	ldr	r5, [pc, #92]	; (8000b7c <fail_startup+0x44>)
    orr r4,r5
 8000b1e:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000b22:	60bc      	str	r4, [r7, #8]

08000b24 <Wait_PLL>:
    
    Wait_PLL:
      ldr r4,[r7,#RCC_CFGR]
 8000b24:	68bc      	ldr	r4, [r7, #8]
      ldr r5,=#RCC_CFGR_SWS
 8000b26:	4d16      	ldr	r5, [pc, #88]	; (8000b80 <fail_startup+0x48>)
      and r4,r5
 8000b28:	ea04 0405 	and.w	r4, r4, r5
      ldr r5,=#RCC_CFGR_SWS_PLL
 8000b2c:	4d15      	ldr	r5, [pc, #84]	; (8000b84 <fail_startup+0x4c>)
      cmp r4,r5
 8000b2e:	42ac      	cmp	r4, r5
      bne Wait_PLL
 8000b30:	d1f8      	bne.n	8000b24 <Wait_PLL>
   
    pop {r4,r5,r6,r7,lr}
 8000b32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    
    bx lr
 8000b36:	4770      	bx	lr

08000b38 <fail_startup>:
  
  fail_startup:
    
    b fail_startup
 8000b38:	e7fe      	b.n	8000b38 <fail_startup>
 8000b3a:	0000      	.short	0x0000
  /*            PLL (clocked by HSE) used as System clock source                */
  /******************************************************************************/

  push {r4,r5,r6,r7,lr}

  ldr r7,=#RCC_BASE
 8000b3c:	40023800 	.word	0x40023800

    /* Enable HSE */
  
    ldr r4,[r7,#RCC_CR]
    ldr r5,=#RCC_CR_HSEON
 8000b40:	00010000 	.word	0x00010000
    orr r4,r5
    str r4,[r7,#RCC_CR]
 
  /* Wait till HSE is ready and if Time out is reached exit */

    ldr r3,=#0x500
 8000b44:	00000500 	.word	0x00000500

      subs r3,#1
      beq  fail_startup
    
      ldr  r4,[r7,#RCC_CR]
      ldr  r5,=#RCC_CR_HSERDY
 8000b48:	00020000 	.word	0x00020000
      beq  Wait_HSE_Ready

      /* Enable high performance mode, System frequency up to 168 MHz */
    
    ldr r4,[r7,#RCC_APB1ENR]
    ldr r5,=#RCC_APB1ENR_PWREN
 8000b4c:	10000000 	.word	0x10000000
    orr r4,r5
    str r4,[r7,#RCC_APB1ENR]
    

  ldr r7,=#PWR_BASE
 8000b50:	40007000 	.word	0x40007000
    
    ldr r4,[r7,#PWR_CR]
    ldr r5,=#PWR_CR_PMODE
 8000b54:	00004000 	.word	0x00004000
  ldr r7,=#RCC_BASE
    
    /* HCLK = SYSCLK / 1*/

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_HPRE_DIV1
 8000b58:	00000000 	.word	0x00000000
    str r4,[r7,#RCC_CFGR]
    
    /* PCLK2 = HCLK / 2*/
    
    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_PPRE2_DIV2
 8000b5c:	00008000 	.word	0x00008000
    str r4,[r7,#RCC_CFGR]
    
    /* PCLK1 = HCLK / 4*/

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_PPRE1_DIV4
 8000b60:	00001400 	.word	0x00001400
    orr r4,r5
    str r4,[r7,#RCC_CFGR]
    
    /* Configure the main PLL */

    ldr r4,=#( PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) )              
 8000b64:	07405408 	.word	0x07405408
    str r4,[r7,#RCC_PLLCFGR]
    
    /* Enable the main PLL */

    ldr r4,[r7,#RCC_CR]
    ldr r5,=#RCC_CR_PLLON
 8000b68:	01000000 	.word	0x01000000
    str r4,[r7,#RCC_CR]
    
    
    Wait_PLL_Ready:
      ldr r4,[r7,#RCC_CR]
      ldr r5,=#RCC_CR_PLLRDY
 8000b6c:	02000000 	.word	0x02000000
      ands r4,r5
      beq Wait_PLL_Ready
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */

  ldr r7,=#FLASH_R_BASE   
 8000b70:	40023c00 	.word	0x40023c00

    ldr r4,=#(FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS)
 8000b74:	00000605 	.word	0x00000605
  ldr r7,=#RCC_BASE
  
    /* Select the main PLL as system clock source */
    
    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#~(RCC_CFGR_SW)
 8000b78:	fffffffc 	.word	0xfffffffc
    and r4,r5
    str r4,[r7,#RCC_CFGR]

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_SW_PLL
 8000b7c:	00000002 	.word	0x00000002
    orr r4,r5
    str r4,[r7,#RCC_CFGR]
    
    Wait_PLL:
      ldr r4,[r7,#RCC_CFGR]
      ldr r5,=#RCC_CFGR_SWS
 8000b80:	0000000c 	.word	0x0000000c
      and r4,r5
      ldr r5,=#RCC_CFGR_SWS_PLL
 8000b84:	00000008 	.word	0x00000008

08000b88 <SW_Init>:
  .text

  FUNCTION SW_Init,global

    // Pushing lr onto the stack
    push {lr}
 8000b88:	b500      	push	{lr}

    bl gpio_c_init
 8000b8a:	f7ff fb51 	bl	8000230 <gpio_c_init>

    // Pop lr off the stack
    pop {lr}
 8000b8e:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 8000b92:	4770      	bx	lr

08000b94 <SW_Get_A>:

  // Define our get function
  FUNCTION SW_Get_A,global

    // Push lr onto the stack
    push {lr}
 8000b94:	b500      	push	{lr}

    // Call the gpio_c_get subroutine
    bl gpio_c_get
 8000b96:	f7ff fb61 	bl	800025c <gpio_c_get>

    // Shift value in r0 by 3 bits
    lsr r0,#3
 8000b9a:	ea4f 00d0 	mov.w	r0, r0, lsr #3

    // Load r1 with the following normalized mask
    ldr r1,=#(~(~0<<1))
 8000b9e:	4903      	ldr	r1, [pc, #12]	; (8000bac <SW_Get_A+0x18>)

    // Clear any garbage numbers from r0
    and r0,r1
 8000ba0:	ea00 0001 	and.w	r0, r0, r1

    // Pop lr off the stack
    pop {lr}
 8000ba4:	f85d eb04 	ldr.w	lr, [sp], #4

    // Branch and exchange out of the subroutine
    bx  lr
 8000ba8:	4770      	bx	lr
 8000baa:	0000      	.short	0x0000

    // Shift value in r0 by 3 bits
    lsr r0,#3

    // Load r1 with the following normalized mask
    ldr r1,=#(~(~0<<1))
 8000bac:	00000001 	.word	0x00000001

08000bb0 <SW_Get_B>:

  // Define our get function for switches [11:8]
  FUNCTION SW_Get_B,global

    // Push lr onto the stack
    push {lr}
 8000bb0:	b500      	push	{lr}

    // Call the gpio_c_get subroutine
    bl gpio_c_get
 8000bb2:	f7ff fb53 	bl	800025c <gpio_c_get>

    // Shit the value in r0 8 bits to the right
    lsr r0,#8
 8000bb6:	ea4f 2010 	mov.w	r0, r0, lsr #8

    // Make a 4-bit wide mask and store in r1
    ldr r1,=#(~(~0<<4))
 8000bba:	4903      	ldr	r1, [pc, #12]	; (8000bc8 <SW_Get_B+0x18>)

    // Clear any unnecessary numbers from r0
    and r0,r1
 8000bbc:	ea00 0001 	and.w	r0, r0, r1

    // Pop lr off the stack
    pop {lr}
 8000bc0:	f85d eb04 	ldr.w	lr, [sp], #4

    // Branch and exchange out of the subroutine
    bx  lr
 8000bc4:	4770      	bx	lr
 8000bc6:	0000      	.short	0x0000

    // Shit the value in r0 8 bits to the right
    lsr r0,#8

    // Make a 4-bit wide mask and store in r1
    ldr r1,=#(~(~0<<4))
 8000bc8:	0000000f 	.word	0x0000000f

08000bcc <sw_get_index>:
     and puts them into r0 (normalized).
  */
  FUNCTION sw_get_index,global

    // Push lr onto the stack
    push {lr}
 8000bcc:	b500      	push	{lr}

    // Call the gpio_c_get subroutine
    bl gpio_c_get
 8000bce:	f7ff fb45 	bl	800025c <gpio_c_get>

    // Shift the value in r0 12 bits to the right
    lsr r0,#12
 8000bd2:	ea4f 3010 	mov.w	r0, r0, lsr #12

    // Make a 3-bit wide mask and store in r1
    ldr r1,=#(~(~0<<3))
 8000bd6:	4903      	ldr	r1, [pc, #12]	; (8000be4 <sw_get_index+0x18>)

    // Clear any unnecessary numbers from r0
    and r0,r1
 8000bd8:	ea00 0001 	and.w	r0, r0, r1

    // Pop lr off the stack
    pop {lr}
 8000bdc:	f85d eb04 	ldr.w	lr, [sp], #4

    // Branch and exchange out of the subroutine
    bx  lr
 8000be0:	4770      	bx	lr
 8000be2:	0000      	.short	0x0000

    // Shift the value in r0 12 bits to the right
    lsr r0,#12

    // Make a 3-bit wide mask and store in r1
    ldr r1,=#(~(~0<<3))
 8000be4:	00000007 	.word	0x00000007

08000be8 <sw_get_segments>:
     and puts them into r0 (normalized).
  */
  FUNCTION sw_get_segments,global

    // Push lr onto the stack
    push {lr}
 8000be8:	b500      	push	{lr}

    // Call the gpio_c_get subroutine
    bl gpio_c_get
 8000bea:	f7ff fb37 	bl	800025c <gpio_c_get>

    // Make a 7-bit wide mask and store in r1
    ldr r1,=#(~(~0<<7))
 8000bee:	4903      	ldr	r1, [pc, #12]	; (8000bfc <sw_get_segments+0x14>)

    // Clear any unnecessary numbers from r0
    and r0,r1
 8000bf0:	ea00 0001 	and.w	r0, r0, r1

    // Pop lr off the stack
    pop {lr}
 8000bf4:	f85d eb04 	ldr.w	lr, [sp], #4

    // Branch and exchange out of the subroutine
    bx  lr
 8000bf8:	4770      	bx	lr
 8000bfa:	0000      	.short	0x0000

    // Call the gpio_c_get subroutine
    bl gpio_c_get

    // Make a 7-bit wide mask and store in r1
    ldr r1,=#(~(~0<<7))
 8000bfc:	0000007f 	.word	0x0000007f

08000c00 <sw_get_hex>:
     and puts them into r0 (normalized).
  */
  FUNCTION sw_get_hex,global

    // Push lr onto the stack
    push {lr}
 8000c00:	b500      	push	{lr}

    // Call the gpio_c_get subroutine
    bl gpio_c_get
 8000c02:	f7ff fb2b 	bl	800025c <gpio_c_get>

    // Shift the value in r0 7 bits to the right
    lsr r0,#7
 8000c06:	ea4f 10d0 	mov.w	r0, r0, lsr #7
    
    // Make a 4-bit wide mask and store in r1
    ldr r1,=#(~(~0<<4))
 8000c0a:	4903      	ldr	r1, [pc, #12]	; (8000c18 <sw_get_hex+0x18>)

    // Clear any unnecessary numbers from r0
    and r0,r1
 8000c0c:	ea00 0001 	and.w	r0, r0, r1

    // Pop lr off the stack
    pop {lr}
 8000c10:	f85d eb04 	ldr.w	lr, [sp], #4

    // Branch and exchange out of the subroutine
    bx  lr
 8000c14:	4770      	bx	lr
 8000c16:	0000      	.short	0x0000

    // Shift the value in r0 7 bits to the right
    lsr r0,#7
    
    // Make a 4-bit wide mask and store in r1
    ldr r1,=#(~(~0<<4))
 8000c18:	0000000f 	.word	0x0000000f

08000c1c <get_latch>:
     and puts them into r0 (normalized).
  */
  FUNCTION get_latch,global

    // Push lr onto the stack
    push {lr}
 8000c1c:	b500      	push	{lr}

    // Call the gpio_c_get subroutine
    bl gpio_c_get
 8000c1e:	f7ff fb1d 	bl	800025c <gpio_c_get>

    // Make a 1-bit wide mask and store in r1
    ldr r1,=#(~(~0<<1))
 8000c22:	4903      	ldr	r1, [pc, #12]	; (8000c30 <get_latch+0x14>)

    // Clear any unnecessary numbers from r0
    and r0,r1
 8000c24:	ea00 0001 	and.w	r0, r0, r1

    // Pop lr off the stack
    pop {lr}
 8000c28:	f85d eb04 	ldr.w	lr, [sp], #4

    // Branch and exchange out of the subroutine
    bx  lr
 8000c2c:	4770      	bx	lr
 8000c2e:	0000      	.short	0x0000

    // Call the gpio_c_get subroutine
    bl gpio_c_get

    // Make a 1-bit wide mask and store in r1
    ldr r1,=#(~(~0<<1))
 8000c30:	00000001 	.word	0x00000001

08000c34 <sw_get_LRservo>:
     for our servos and puts them into r0 (normalized).
  */
  FUNCTION sw_get_LRservo,global

    // Push lr onto the stack
    push {lr}
 8000c34:	b500      	push	{lr}

    // Call the gpio_c_get subroutine
    bl gpio_c_get
 8000c36:	f7ff fb11 	bl	800025c <gpio_c_get>

    // Make a 1-bit wide mask and store in r1
    ldr r1,=#(~(~0<<1))
 8000c3a:	4903      	ldr	r1, [pc, #12]	; (8000c48 <sw_get_LRservo+0x14>)

    // Clear any unnecessary numbers from r0
    and r0,r1
 8000c3c:	ea00 0001 	and.w	r0, r0, r1

    // Pop lr off the stack
    pop {lr}
 8000c40:	f85d eb04 	ldr.w	lr, [sp], #4

    // Branch and exchange out of the subroutine
    bx  lr
 8000c44:	4770      	bx	lr
 8000c46:	0000      	.short	0x0000

    // Call the gpio_c_get subroutine
    bl gpio_c_get

    // Make a 1-bit wide mask and store in r1
    ldr r1,=#(~(~0<<1))
 8000c48:	00000001 	.word	0x00000001

08000c4c <sw_get_UDservo>:
       for our servos and puts them into r0 (normalized).
    */
    FUNCTION sw_get_UDservo,global

      // Push lr onto the stack
      push {lr}
 8000c4c:	b500      	push	{lr}

      // Call the gpio_c_get subroutine
      bl gpio_c_get
 8000c4e:	f7ff fb05 	bl	800025c <gpio_c_get>

      // Shift the value in r0 1 bits to the right
      lsr r0,#1
 8000c52:	ea4f 0050 	mov.w	r0, r0, lsr #1

      // Make a 1-bit wide mask and store in r1
      ldr r1,=#(~(~0<<1))
 8000c56:	4903      	ldr	r1, [pc, #12]	; (8000c64 <sw_get_UDservo+0x18>)

      // Clear any unnecessary numbers from r0
      and r0,r1
 8000c58:	ea00 0001 	and.w	r0, r0, r1

      // Pop lr off the stack
      pop {lr}
 8000c5c:	f85d eb04 	ldr.w	lr, [sp], #4

      // Branch and exchange out of the subroutine
      bx  lr
 8000c60:	4770      	bx	lr
 8000c62:	0000      	.short	0x0000

      // Shift the value in r0 1 bits to the right
      lsr r0,#1

      // Make a 1-bit wide mask and store in r1
      ldr r1,=#(~(~0<<1))
 8000c64:	00000001 	.word	0x00000001

08000c68 <automatic>:
       on switch value from switch[3]
    */
    FUNCTION automatic,global

      // Push lr onto the stack
      push {lr}
 8000c68:	b500      	push	{lr}

      // Call the gpio_c_get subroutine
      bl gpio_c_get
 8000c6a:	f7ff faf7 	bl	800025c <gpio_c_get>

      // Shift the value in r0 1 bits to the right
      lsr r0,#3
 8000c6e:	ea4f 00d0 	mov.w	r0, r0, lsr #3

      // Make a 1-bit wide mask and store in r1
      ldr r1,=#(~(~0<<1))
 8000c72:	4903      	ldr	r1, [pc, #12]	; (8000c80 <automatic+0x18>)

      // Clear any unnecessary numbers from r0
      and r0,r1
 8000c74:	ea00 0001 	and.w	r0, r0, r1

      // Pop lr off the stack
      pop {lr}
 8000c78:	f85d eb04 	ldr.w	lr, [sp], #4

      // Branch and exchange out of the subroutine
      bx  lr
 8000c7c:	4770      	bx	lr
 8000c7e:	0000      	.short	0x0000

      // Shift the value in r0 1 bits to the right
      lsr r0,#3

      // Make a 1-bit wide mask and store in r1
      ldr r1,=#(~(~0<<1))
 8000c80:	00000001 	.word	0x00000001

08000c84 <ADC_IRQHandler>:
*/

FUNCTION Default_Handler

  Infinite_Loop:
    b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>
 8000c86:	bf00      	nop

08000c88 <Reset_Handler>:
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 8000c88:	4915      	ldr	r1, [pc, #84]	; (8000ce0 <bloop+0x3e>)
    ldr	r2, =__data_start__	// to start
 8000c8a:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <bloop+0x42>)
    ldr	r3, =__data_end__	// to end
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <bloop+0x46>)

08000c8e <loop_data>:

    loop_data:
      cmp	r2, r3
 8000c8e:	429a      	cmp	r2, r3
      ittt	lt
 8000c90:	bfbe      	ittt	lt
      ldrlt	r0, [r1], #4
 8000c92:	f851 0b04 	ldrlt.w	r0, [r1], #4
      strlt	r0, [r2], #4
 8000c96:	f842 0b04 	strlt.w	r0, [r2], #4
      blt	loop_data
 8000c9a:	e7f8      	blt.n	8000c8e <loop_data>
      
    movs    r0, #0
 8000c9c:	2000      	movs	r0, #0
    ldr     r1, =__bss_start__
 8000c9e:	4913      	ldr	r1, [pc, #76]	; (8000cec <bloop+0x4a>)
    ldr     r2, =__bss_end__
 8000ca0:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <bloop+0x4e>)

08000ca2 <bloop>:

    bloop:
      cmp     r1, r2
 8000ca2:	4291      	cmp	r1, r2
      itt     lo
 8000ca4:	bf3c      	itt	cc
      strlo   r0, [r1], #4
 8000ca6:	f841 0b04 	strcc.w	r0, [r1], #4
      blo     bloop
 8000caa:	e7fa      	bcc.n	8000ca2 <bloop>
    
    bl __libc_init_array
 8000cac:	f000 fc7c 	bl	80015a8 <__libc_init_array>

    ldr	r0, .Lfini
 8000cb0:	480a      	ldr	r0, [pc, #40]	; (8000cdc <bloop+0x3a>)
    bl	atexit
 8000cb2:	f000 fc63 	bl	800157c <atexit>

    .weak SystemInit
    ldr	r0,=SystemInit
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <bloop+0x52>)
    cmp	r0,#0
 8000cb8:	2800      	cmp	r0, #0
    it	ne
 8000cba:	bf18      	it	ne
    blxne	r0
 8000cbc:	4780      	blxne	r0
    
    ldr	  r3,=0xe000ed14
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <bloop+0x56>)
    ldr   r2,=((1<<4) | (1<<3))
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <bloop+0x5a>)
    str   r2,[r3]
 8000cc2:	601a      	str	r2, [r3, #0]
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <bloop+0x5e>)
    ldr r1,[r3, #RCC_AHB1ENR]
 8000cc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#0b11111			/* enable all clocks */
 8000cc8:	f04f 021f 	mov.w	r2, #31
    orr r1,r2
 8000ccc:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, #RCC_AHB1ENR]
 8000cd0:	6319      	str	r1, [r3, #48]	; 0x30
    
    bl  main
 8000cd2:	f7ff fb51 	bl	8000378 <main>
	
    bl  exit
 8000cd6:	f000 fc57 	bl	8001588 <exit>
	
    bx  lr
 8000cda:	4770      	bx	lr
 8000cdc:	080017c9 	.word	0x080017c9
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 8000ce0:	080017e0 	.word	0x080017e0
    ldr	r2, =__data_start__	// to start
 8000ce4:	20000000 	.word	0x20000000
    ldr	r3, =__data_end__	// to end
 8000ce8:	20000450 	.word	0x20000450
      ldrlt	r0, [r1], #4
      strlt	r0, [r2], #4
      blt	loop_data
      
    movs    r0, #0
    ldr     r1, =__bss_start__
 8000cec:	20000450 	.word	0x20000450
    ldr     r2, =__bss_end__
 8000cf0:	20000484 	.word	0x20000484

    ldr	r0, .Lfini
    bl	atexit

    .weak SystemInit
    ldr	r0,=SystemInit
 8000cf4:	00000000 	.word	0x00000000
    cmp	r0,#0
    it	ne
    blxne	r0
    
    ldr	  r3,=0xe000ed14
 8000cf8:	e000ed14 	.word	0xe000ed14
    ldr   r2,=((1<<4) | (1<<3))
 8000cfc:	00000018 	.word	0x00000018
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 8000d00:	40023800 	.word	0x40023800

08000d04 <seg7_init>:
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <seg7_init_loop_end+0x6>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4911      	ldr	r1, [pc, #68]	; (8000d50 <seg7_init_loop_end+0xa>)
 8000d0c:	f361 0213 	bfi	r2, r1, #0, #20
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	695a      	ldr	r2, [r3, #20]
 8000d14:	490f      	ldr	r1, [pc, #60]	; (8000d54 <seg7_init_loop_end+0xe>)
 8000d16:	f361 0209 	bfi	r2, r1, #0, #10
 8000d1a:	615a      	str	r2, [r3, #20]
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <seg7_init_loop_end+0x12>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	490e      	ldr	r1, [pc, #56]	; (8000d5c <seg7_init_loop_end+0x16>)
 8000d22:	f361 0201 	bfi	r2, r1, #0, #2
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	f04f 0400 	mov.w	r4, #0
 8000d2c:	f04f 0508 	mov.w	r5, #8
 8000d30:	4e0b      	ldr	r6, [pc, #44]	; (8000d60 <seg7_init_loop_end+0x1a>)

08000d32 <seg7_init_loop>:
 8000d32:	b145      	cbz	r5, 8000d46 <seg7_init_loop_end>
 8000d34:	4620      	mov	r0, r4
 8000d36:	4631      	mov	r1, r6
 8000d38:	f000 f814 	bl	8000d64 <seg7_put>
 8000d3c:	f104 0401 	add.w	r4, r4, #1
 8000d40:	f1a5 0501 	sub.w	r5, r5, #1
 8000d44:	e7f5      	b.n	8000d32 <seg7_init_loop>

08000d46 <seg7_init_loop_end>:
 8000d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000d4a:	4770      	bx	lr
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	00055555 	.word	0x00055555
 8000d54:	000003ff 	.word	0x000003ff
 8000d58:	40020400 	.word	0x40020400
 8000d5c:	00000001 	.word	0x00000001
 8000d60:	0000007f 	.word	0x0000007f

08000d64 <seg7_put>:
 8000d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d66:	4f0a      	ldr	r7, [pc, #40]	; (8000d90 <seg7_put+0x2c>)
 8000d68:	697c      	ldr	r4, [r7, #20]
 8000d6a:	f360 0402 	bfi	r4, r0, #0, #3
 8000d6e:	f361 04c9 	bfi	r4, r1, #3, #7
 8000d72:	617c      	str	r4, [r7, #20]
 8000d74:	4f07      	ldr	r7, [pc, #28]	; (8000d94 <seg7_put+0x30>)
 8000d76:	f04f 0401 	mov.w	r4, #1
 8000d7a:	61bc      	str	r4, [r7, #24]
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	ea4f 4404 	mov.w	r4, r4, lsl #16
 8000d88:	61bc      	str	r4, [r7, #24]
 8000d8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40020400 	.word	0x40020400

08000d98 <__aeabi_drsub>:
 8000d98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000d9c:	e002      	b.n	8000da4 <__adddf3>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_dsub>:
 8000da0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000da4 <__adddf3>:
 8000da4:	b530      	push	{r4, r5, lr}
 8000da6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000daa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000dae:	ea94 0f05 	teq	r4, r5
 8000db2:	bf08      	it	eq
 8000db4:	ea90 0f02 	teqeq	r0, r2
 8000db8:	bf1f      	itttt	ne
 8000dba:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000dbe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000dc2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000dc6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000dca:	f000 80e2 	beq.w	8000f92 <__adddf3+0x1ee>
 8000dce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000dd2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000dd6:	bfb8      	it	lt
 8000dd8:	426d      	neglt	r5, r5
 8000dda:	dd0c      	ble.n	8000df6 <__adddf3+0x52>
 8000ddc:	442c      	add	r4, r5
 8000dde:	ea80 0202 	eor.w	r2, r0, r2
 8000de2:	ea81 0303 	eor.w	r3, r1, r3
 8000de6:	ea82 0000 	eor.w	r0, r2, r0
 8000dea:	ea83 0101 	eor.w	r1, r3, r1
 8000dee:	ea80 0202 	eor.w	r2, r0, r2
 8000df2:	ea81 0303 	eor.w	r3, r1, r3
 8000df6:	2d36      	cmp	r5, #54	; 0x36
 8000df8:	bf88      	it	hi
 8000dfa:	bd30      	pophi	{r4, r5, pc}
 8000dfc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e00:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000e04:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000e08:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000e0c:	d002      	beq.n	8000e14 <__adddf3+0x70>
 8000e0e:	4240      	negs	r0, r0
 8000e10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e14:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000e18:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000e1c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000e20:	d002      	beq.n	8000e28 <__adddf3+0x84>
 8000e22:	4252      	negs	r2, r2
 8000e24:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e28:	ea94 0f05 	teq	r4, r5
 8000e2c:	f000 80a7 	beq.w	8000f7e <__adddf3+0x1da>
 8000e30:	f1a4 0401 	sub.w	r4, r4, #1
 8000e34:	f1d5 0e20 	rsbs	lr, r5, #32
 8000e38:	db0d      	blt.n	8000e56 <__adddf3+0xb2>
 8000e3a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000e3e:	fa22 f205 	lsr.w	r2, r2, r5
 8000e42:	1880      	adds	r0, r0, r2
 8000e44:	f141 0100 	adc.w	r1, r1, #0
 8000e48:	fa03 f20e 	lsl.w	r2, r3, lr
 8000e4c:	1880      	adds	r0, r0, r2
 8000e4e:	fa43 f305 	asr.w	r3, r3, r5
 8000e52:	4159      	adcs	r1, r3
 8000e54:	e00e      	b.n	8000e74 <__adddf3+0xd0>
 8000e56:	f1a5 0520 	sub.w	r5, r5, #32
 8000e5a:	f10e 0e20 	add.w	lr, lr, #32
 8000e5e:	2a01      	cmp	r2, #1
 8000e60:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000e64:	bf28      	it	cs
 8000e66:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000e6a:	fa43 f305 	asr.w	r3, r3, r5
 8000e6e:	18c0      	adds	r0, r0, r3
 8000e70:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000e74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000e78:	d507      	bpl.n	8000e8a <__adddf3+0xe6>
 8000e7a:	f04f 0e00 	mov.w	lr, #0
 8000e7e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000e82:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000e86:	eb6e 0101 	sbc.w	r1, lr, r1
 8000e8a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000e8e:	d31b      	bcc.n	8000ec8 <__adddf3+0x124>
 8000e90:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000e94:	d30c      	bcc.n	8000eb0 <__adddf3+0x10c>
 8000e96:	0849      	lsrs	r1, r1, #1
 8000e98:	ea5f 0030 	movs.w	r0, r0, rrx
 8000e9c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000ea0:	f104 0401 	add.w	r4, r4, #1
 8000ea4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000ea8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000eac:	f080 809a 	bcs.w	8000fe4 <__adddf3+0x240>
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	bf08      	it	eq
 8000eb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000eba:	f150 0000 	adcs.w	r0, r0, #0
 8000ebe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ec2:	ea41 0105 	orr.w	r1, r1, r5
 8000ec6:	bd30      	pop	{r4, r5, pc}
 8000ec8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000ecc:	4140      	adcs	r0, r0
 8000ece:	eb41 0101 	adc.w	r1, r1, r1
 8000ed2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ed6:	f1a4 0401 	sub.w	r4, r4, #1
 8000eda:	d1e9      	bne.n	8000eb0 <__adddf3+0x10c>
 8000edc:	f091 0f00 	teq	r1, #0
 8000ee0:	bf04      	itt	eq
 8000ee2:	4601      	moveq	r1, r0
 8000ee4:	2000      	moveq	r0, #0
 8000ee6:	fab1 f381 	clz	r3, r1
 8000eea:	bf08      	it	eq
 8000eec:	3320      	addeq	r3, #32
 8000eee:	f1a3 030b 	sub.w	r3, r3, #11
 8000ef2:	f1b3 0220 	subs.w	r2, r3, #32
 8000ef6:	da0c      	bge.n	8000f12 <__adddf3+0x16e>
 8000ef8:	320c      	adds	r2, #12
 8000efa:	dd08      	ble.n	8000f0e <__adddf3+0x16a>
 8000efc:	f102 0c14 	add.w	ip, r2, #20
 8000f00:	f1c2 020c 	rsb	r2, r2, #12
 8000f04:	fa01 f00c 	lsl.w	r0, r1, ip
 8000f08:	fa21 f102 	lsr.w	r1, r1, r2
 8000f0c:	e00c      	b.n	8000f28 <__adddf3+0x184>
 8000f0e:	f102 0214 	add.w	r2, r2, #20
 8000f12:	bfd8      	it	le
 8000f14:	f1c2 0c20 	rsble	ip, r2, #32
 8000f18:	fa01 f102 	lsl.w	r1, r1, r2
 8000f1c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000f20:	bfdc      	itt	le
 8000f22:	ea41 010c 	orrle.w	r1, r1, ip
 8000f26:	4090      	lslle	r0, r2
 8000f28:	1ae4      	subs	r4, r4, r3
 8000f2a:	bfa2      	ittt	ge
 8000f2c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000f30:	4329      	orrge	r1, r5
 8000f32:	bd30      	popge	{r4, r5, pc}
 8000f34:	ea6f 0404 	mvn.w	r4, r4
 8000f38:	3c1f      	subs	r4, #31
 8000f3a:	da1c      	bge.n	8000f76 <__adddf3+0x1d2>
 8000f3c:	340c      	adds	r4, #12
 8000f3e:	dc0e      	bgt.n	8000f5e <__adddf3+0x1ba>
 8000f40:	f104 0414 	add.w	r4, r4, #20
 8000f44:	f1c4 0220 	rsb	r2, r4, #32
 8000f48:	fa20 f004 	lsr.w	r0, r0, r4
 8000f4c:	fa01 f302 	lsl.w	r3, r1, r2
 8000f50:	ea40 0003 	orr.w	r0, r0, r3
 8000f54:	fa21 f304 	lsr.w	r3, r1, r4
 8000f58:	ea45 0103 	orr.w	r1, r5, r3
 8000f5c:	bd30      	pop	{r4, r5, pc}
 8000f5e:	f1c4 040c 	rsb	r4, r4, #12
 8000f62:	f1c4 0220 	rsb	r2, r4, #32
 8000f66:	fa20 f002 	lsr.w	r0, r0, r2
 8000f6a:	fa01 f304 	lsl.w	r3, r1, r4
 8000f6e:	ea40 0003 	orr.w	r0, r0, r3
 8000f72:	4629      	mov	r1, r5
 8000f74:	bd30      	pop	{r4, r5, pc}
 8000f76:	fa21 f004 	lsr.w	r0, r1, r4
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	bd30      	pop	{r4, r5, pc}
 8000f7e:	f094 0f00 	teq	r4, #0
 8000f82:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000f86:	bf06      	itte	eq
 8000f88:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000f8c:	3401      	addeq	r4, #1
 8000f8e:	3d01      	subne	r5, #1
 8000f90:	e74e      	b.n	8000e30 <__adddf3+0x8c>
 8000f92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000f96:	bf18      	it	ne
 8000f98:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000f9c:	d029      	beq.n	8000ff2 <__adddf3+0x24e>
 8000f9e:	ea94 0f05 	teq	r4, r5
 8000fa2:	bf08      	it	eq
 8000fa4:	ea90 0f02 	teqeq	r0, r2
 8000fa8:	d005      	beq.n	8000fb6 <__adddf3+0x212>
 8000faa:	ea54 0c00 	orrs.w	ip, r4, r0
 8000fae:	bf04      	itt	eq
 8000fb0:	4619      	moveq	r1, r3
 8000fb2:	4610      	moveq	r0, r2
 8000fb4:	bd30      	pop	{r4, r5, pc}
 8000fb6:	ea91 0f03 	teq	r1, r3
 8000fba:	bf1e      	ittt	ne
 8000fbc:	2100      	movne	r1, #0
 8000fbe:	2000      	movne	r0, #0
 8000fc0:	bd30      	popne	{r4, r5, pc}
 8000fc2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000fc6:	d105      	bne.n	8000fd4 <__adddf3+0x230>
 8000fc8:	0040      	lsls	r0, r0, #1
 8000fca:	4149      	adcs	r1, r1
 8000fcc:	bf28      	it	cs
 8000fce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000fd2:	bd30      	pop	{r4, r5, pc}
 8000fd4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000fd8:	bf3c      	itt	cc
 8000fda:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000fde:	bd30      	popcc	{r4, r5, pc}
 8000fe0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000fe4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000fe8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000fec:	f04f 0000 	mov.w	r0, #0
 8000ff0:	bd30      	pop	{r4, r5, pc}
 8000ff2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000ff6:	bf1a      	itte	ne
 8000ff8:	4619      	movne	r1, r3
 8000ffa:	4610      	movne	r0, r2
 8000ffc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8001000:	bf1c      	itt	ne
 8001002:	460b      	movne	r3, r1
 8001004:	4602      	movne	r2, r0
 8001006:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800100a:	bf06      	itte	eq
 800100c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8001010:	ea91 0f03 	teqeq	r1, r3
 8001014:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8001018:	bd30      	pop	{r4, r5, pc}
 800101a:	bf00      	nop

0800101c <__aeabi_ui2d>:
 800101c:	f090 0f00 	teq	r0, #0
 8001020:	bf04      	itt	eq
 8001022:	2100      	moveq	r1, #0
 8001024:	4770      	bxeq	lr
 8001026:	b530      	push	{r4, r5, lr}
 8001028:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800102c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001030:	f04f 0500 	mov.w	r5, #0
 8001034:	f04f 0100 	mov.w	r1, #0
 8001038:	e750      	b.n	8000edc <__adddf3+0x138>
 800103a:	bf00      	nop

0800103c <__aeabi_i2d>:
 800103c:	f090 0f00 	teq	r0, #0
 8001040:	bf04      	itt	eq
 8001042:	2100      	moveq	r1, #0
 8001044:	4770      	bxeq	lr
 8001046:	b530      	push	{r4, r5, lr}
 8001048:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800104c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001050:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8001054:	bf48      	it	mi
 8001056:	4240      	negmi	r0, r0
 8001058:	f04f 0100 	mov.w	r1, #0
 800105c:	e73e      	b.n	8000edc <__adddf3+0x138>
 800105e:	bf00      	nop

08001060 <__aeabi_f2d>:
 8001060:	0042      	lsls	r2, r0, #1
 8001062:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8001066:	ea4f 0131 	mov.w	r1, r1, rrx
 800106a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800106e:	bf1f      	itttt	ne
 8001070:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8001074:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8001078:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800107c:	4770      	bxne	lr
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	bf14      	ite	ne
 8001084:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8001088:	4770      	bxeq	lr
 800108a:	b530      	push	{r4, r5, lr}
 800108c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8001090:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001094:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001098:	e720      	b.n	8000edc <__adddf3+0x138>
 800109a:	bf00      	nop

0800109c <__aeabi_ul2d>:
 800109c:	ea50 0201 	orrs.w	r2, r0, r1
 80010a0:	bf08      	it	eq
 80010a2:	4770      	bxeq	lr
 80010a4:	b530      	push	{r4, r5, lr}
 80010a6:	f04f 0500 	mov.w	r5, #0
 80010aa:	e00a      	b.n	80010c2 <__aeabi_l2d+0x16>

080010ac <__aeabi_l2d>:
 80010ac:	ea50 0201 	orrs.w	r2, r0, r1
 80010b0:	bf08      	it	eq
 80010b2:	4770      	bxeq	lr
 80010b4:	b530      	push	{r4, r5, lr}
 80010b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80010ba:	d502      	bpl.n	80010c2 <__aeabi_l2d+0x16>
 80010bc:	4240      	negs	r0, r0
 80010be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80010c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80010ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80010ce:	f43f aedc 	beq.w	8000e8a <__adddf3+0xe6>
 80010d2:	f04f 0203 	mov.w	r2, #3
 80010d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80010da:	bf18      	it	ne
 80010dc:	3203      	addne	r2, #3
 80010de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80010e2:	bf18      	it	ne
 80010e4:	3203      	addne	r2, #3
 80010e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80010ea:	f1c2 0320 	rsb	r3, r2, #32
 80010ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80010f2:	fa20 f002 	lsr.w	r0, r0, r2
 80010f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80010fa:	ea40 000e 	orr.w	r0, r0, lr
 80010fe:	fa21 f102 	lsr.w	r1, r1, r2
 8001102:	4414      	add	r4, r2
 8001104:	e6c1      	b.n	8000e8a <__adddf3+0xe6>
 8001106:	bf00      	nop

08001108 <__aeabi_dmul>:
 8001108:	b570      	push	{r4, r5, r6, lr}
 800110a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800110e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001112:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001116:	bf1d      	ittte	ne
 8001118:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800111c:	ea94 0f0c 	teqne	r4, ip
 8001120:	ea95 0f0c 	teqne	r5, ip
 8001124:	f000 f8de 	bleq	80012e4 <__aeabi_dmul+0x1dc>
 8001128:	442c      	add	r4, r5
 800112a:	ea81 0603 	eor.w	r6, r1, r3
 800112e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8001132:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001136:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800113a:	bf18      	it	ne
 800113c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8001140:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001148:	d038      	beq.n	80011bc <__aeabi_dmul+0xb4>
 800114a:	fba0 ce02 	umull	ip, lr, r0, r2
 800114e:	f04f 0500 	mov.w	r5, #0
 8001152:	fbe1 e502 	umlal	lr, r5, r1, r2
 8001156:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800115a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800115e:	f04f 0600 	mov.w	r6, #0
 8001162:	fbe1 5603 	umlal	r5, r6, r1, r3
 8001166:	f09c 0f00 	teq	ip, #0
 800116a:	bf18      	it	ne
 800116c:	f04e 0e01 	orrne.w	lr, lr, #1
 8001170:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8001174:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8001178:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800117c:	d204      	bcs.n	8001188 <__aeabi_dmul+0x80>
 800117e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8001182:	416d      	adcs	r5, r5
 8001184:	eb46 0606 	adc.w	r6, r6, r6
 8001188:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800118c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8001190:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8001194:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8001198:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800119c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80011a0:	bf88      	it	hi
 80011a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80011a6:	d81e      	bhi.n	80011e6 <__aeabi_dmul+0xde>
 80011a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80011ac:	bf08      	it	eq
 80011ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80011b2:	f150 0000 	adcs.w	r0, r0, #0
 80011b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80011ba:	bd70      	pop	{r4, r5, r6, pc}
 80011bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80011c0:	ea46 0101 	orr.w	r1, r6, r1
 80011c4:	ea40 0002 	orr.w	r0, r0, r2
 80011c8:	ea81 0103 	eor.w	r1, r1, r3
 80011cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80011d0:	bfc2      	ittt	gt
 80011d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80011d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80011da:	bd70      	popgt	{r4, r5, r6, pc}
 80011dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80011e0:	f04f 0e00 	mov.w	lr, #0
 80011e4:	3c01      	subs	r4, #1
 80011e6:	f300 80ab 	bgt.w	8001340 <__aeabi_dmul+0x238>
 80011ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80011ee:	bfde      	ittt	le
 80011f0:	2000      	movle	r0, #0
 80011f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80011f6:	bd70      	pople	{r4, r5, r6, pc}
 80011f8:	f1c4 0400 	rsb	r4, r4, #0
 80011fc:	3c20      	subs	r4, #32
 80011fe:	da35      	bge.n	800126c <__aeabi_dmul+0x164>
 8001200:	340c      	adds	r4, #12
 8001202:	dc1b      	bgt.n	800123c <__aeabi_dmul+0x134>
 8001204:	f104 0414 	add.w	r4, r4, #20
 8001208:	f1c4 0520 	rsb	r5, r4, #32
 800120c:	fa00 f305 	lsl.w	r3, r0, r5
 8001210:	fa20 f004 	lsr.w	r0, r0, r4
 8001214:	fa01 f205 	lsl.w	r2, r1, r5
 8001218:	ea40 0002 	orr.w	r0, r0, r2
 800121c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8001220:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001224:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001228:	fa21 f604 	lsr.w	r6, r1, r4
 800122c:	eb42 0106 	adc.w	r1, r2, r6
 8001230:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001234:	bf08      	it	eq
 8001236:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800123a:	bd70      	pop	{r4, r5, r6, pc}
 800123c:	f1c4 040c 	rsb	r4, r4, #12
 8001240:	f1c4 0520 	rsb	r5, r4, #32
 8001244:	fa00 f304 	lsl.w	r3, r0, r4
 8001248:	fa20 f005 	lsr.w	r0, r0, r5
 800124c:	fa01 f204 	lsl.w	r2, r1, r4
 8001250:	ea40 0002 	orr.w	r0, r0, r2
 8001254:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001258:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800125c:	f141 0100 	adc.w	r1, r1, #0
 8001260:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001264:	bf08      	it	eq
 8001266:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800126a:	bd70      	pop	{r4, r5, r6, pc}
 800126c:	f1c4 0520 	rsb	r5, r4, #32
 8001270:	fa00 f205 	lsl.w	r2, r0, r5
 8001274:	ea4e 0e02 	orr.w	lr, lr, r2
 8001278:	fa20 f304 	lsr.w	r3, r0, r4
 800127c:	fa01 f205 	lsl.w	r2, r1, r5
 8001280:	ea43 0302 	orr.w	r3, r3, r2
 8001284:	fa21 f004 	lsr.w	r0, r1, r4
 8001288:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800128c:	fa21 f204 	lsr.w	r2, r1, r4
 8001290:	ea20 0002 	bic.w	r0, r0, r2
 8001294:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8001298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800129c:	bf08      	it	eq
 800129e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80012a2:	bd70      	pop	{r4, r5, r6, pc}
 80012a4:	f094 0f00 	teq	r4, #0
 80012a8:	d10f      	bne.n	80012ca <__aeabi_dmul+0x1c2>
 80012aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80012ae:	0040      	lsls	r0, r0, #1
 80012b0:	eb41 0101 	adc.w	r1, r1, r1
 80012b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80012b8:	bf08      	it	eq
 80012ba:	3c01      	subeq	r4, #1
 80012bc:	d0f7      	beq.n	80012ae <__aeabi_dmul+0x1a6>
 80012be:	ea41 0106 	orr.w	r1, r1, r6
 80012c2:	f095 0f00 	teq	r5, #0
 80012c6:	bf18      	it	ne
 80012c8:	4770      	bxne	lr
 80012ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80012ce:	0052      	lsls	r2, r2, #1
 80012d0:	eb43 0303 	adc.w	r3, r3, r3
 80012d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80012d8:	bf08      	it	eq
 80012da:	3d01      	subeq	r5, #1
 80012dc:	d0f7      	beq.n	80012ce <__aeabi_dmul+0x1c6>
 80012de:	ea43 0306 	orr.w	r3, r3, r6
 80012e2:	4770      	bx	lr
 80012e4:	ea94 0f0c 	teq	r4, ip
 80012e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80012ec:	bf18      	it	ne
 80012ee:	ea95 0f0c 	teqne	r5, ip
 80012f2:	d00c      	beq.n	800130e <__aeabi_dmul+0x206>
 80012f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80012f8:	bf18      	it	ne
 80012fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80012fe:	d1d1      	bne.n	80012a4 <__aeabi_dmul+0x19c>
 8001300:	ea81 0103 	eor.w	r1, r1, r3
 8001304:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001308:	f04f 0000 	mov.w	r0, #0
 800130c:	bd70      	pop	{r4, r5, r6, pc}
 800130e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001312:	bf06      	itte	eq
 8001314:	4610      	moveq	r0, r2
 8001316:	4619      	moveq	r1, r3
 8001318:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800131c:	d019      	beq.n	8001352 <__aeabi_dmul+0x24a>
 800131e:	ea94 0f0c 	teq	r4, ip
 8001322:	d102      	bne.n	800132a <__aeabi_dmul+0x222>
 8001324:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001328:	d113      	bne.n	8001352 <__aeabi_dmul+0x24a>
 800132a:	ea95 0f0c 	teq	r5, ip
 800132e:	d105      	bne.n	800133c <__aeabi_dmul+0x234>
 8001330:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001334:	bf1c      	itt	ne
 8001336:	4610      	movne	r0, r2
 8001338:	4619      	movne	r1, r3
 800133a:	d10a      	bne.n	8001352 <__aeabi_dmul+0x24a>
 800133c:	ea81 0103 	eor.w	r1, r1, r3
 8001340:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001344:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001348:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800134c:	f04f 0000 	mov.w	r0, #0
 8001350:	bd70      	pop	{r4, r5, r6, pc}
 8001352:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001356:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800135a:	bd70      	pop	{r4, r5, r6, pc}

0800135c <__aeabi_ddiv>:
 800135c:	b570      	push	{r4, r5, r6, lr}
 800135e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001362:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001366:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800136a:	bf1d      	ittte	ne
 800136c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001370:	ea94 0f0c 	teqne	r4, ip
 8001374:	ea95 0f0c 	teqne	r5, ip
 8001378:	f000 f8a7 	bleq	80014ca <__aeabi_ddiv+0x16e>
 800137c:	eba4 0405 	sub.w	r4, r4, r5
 8001380:	ea81 0e03 	eor.w	lr, r1, r3
 8001384:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800138c:	f000 8088 	beq.w	80014a0 <__aeabi_ddiv+0x144>
 8001390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001394:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8001398:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800139c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80013a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80013a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80013a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80013ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80013b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80013b4:	429d      	cmp	r5, r3
 80013b6:	bf08      	it	eq
 80013b8:	4296      	cmpeq	r6, r2
 80013ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80013be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80013c2:	d202      	bcs.n	80013ca <__aeabi_ddiv+0x6e>
 80013c4:	085b      	lsrs	r3, r3, #1
 80013c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80013ca:	1ab6      	subs	r6, r6, r2
 80013cc:	eb65 0503 	sbc.w	r5, r5, r3
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80013d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80013da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80013de:	ebb6 0e02 	subs.w	lr, r6, r2
 80013e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80013e6:	bf22      	ittt	cs
 80013e8:	1ab6      	subcs	r6, r6, r2
 80013ea:	4675      	movcs	r5, lr
 80013ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80013f0:	085b      	lsrs	r3, r3, #1
 80013f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80013f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80013fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80013fe:	bf22      	ittt	cs
 8001400:	1ab6      	subcs	r6, r6, r2
 8001402:	4675      	movcs	r5, lr
 8001404:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001408:	085b      	lsrs	r3, r3, #1
 800140a:	ea4f 0232 	mov.w	r2, r2, rrx
 800140e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001412:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001416:	bf22      	ittt	cs
 8001418:	1ab6      	subcs	r6, r6, r2
 800141a:	4675      	movcs	r5, lr
 800141c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001420:	085b      	lsrs	r3, r3, #1
 8001422:	ea4f 0232 	mov.w	r2, r2, rrx
 8001426:	ebb6 0e02 	subs.w	lr, r6, r2
 800142a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800142e:	bf22      	ittt	cs
 8001430:	1ab6      	subcs	r6, r6, r2
 8001432:	4675      	movcs	r5, lr
 8001434:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001438:	ea55 0e06 	orrs.w	lr, r5, r6
 800143c:	d018      	beq.n	8001470 <__aeabi_ddiv+0x114>
 800143e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001442:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001446:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800144a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800144e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8001452:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8001456:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800145a:	d1c0      	bne.n	80013de <__aeabi_ddiv+0x82>
 800145c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001460:	d10b      	bne.n	800147a <__aeabi_ddiv+0x11e>
 8001462:	ea41 0100 	orr.w	r1, r1, r0
 8001466:	f04f 0000 	mov.w	r0, #0
 800146a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800146e:	e7b6      	b.n	80013de <__aeabi_ddiv+0x82>
 8001470:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001474:	bf04      	itt	eq
 8001476:	4301      	orreq	r1, r0
 8001478:	2000      	moveq	r0, #0
 800147a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800147e:	bf88      	it	hi
 8001480:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001484:	f63f aeaf 	bhi.w	80011e6 <__aeabi_dmul+0xde>
 8001488:	ebb5 0c03 	subs.w	ip, r5, r3
 800148c:	bf04      	itt	eq
 800148e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8001492:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001496:	f150 0000 	adcs.w	r0, r0, #0
 800149a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800149e:	bd70      	pop	{r4, r5, r6, pc}
 80014a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80014a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80014a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80014ac:	bfc2      	ittt	gt
 80014ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80014b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80014b6:	bd70      	popgt	{r4, r5, r6, pc}
 80014b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80014bc:	f04f 0e00 	mov.w	lr, #0
 80014c0:	3c01      	subs	r4, #1
 80014c2:	e690      	b.n	80011e6 <__aeabi_dmul+0xde>
 80014c4:	ea45 0e06 	orr.w	lr, r5, r6
 80014c8:	e68d      	b.n	80011e6 <__aeabi_dmul+0xde>
 80014ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80014ce:	ea94 0f0c 	teq	r4, ip
 80014d2:	bf08      	it	eq
 80014d4:	ea95 0f0c 	teqeq	r5, ip
 80014d8:	f43f af3b 	beq.w	8001352 <__aeabi_dmul+0x24a>
 80014dc:	ea94 0f0c 	teq	r4, ip
 80014e0:	d10a      	bne.n	80014f8 <__aeabi_ddiv+0x19c>
 80014e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80014e6:	f47f af34 	bne.w	8001352 <__aeabi_dmul+0x24a>
 80014ea:	ea95 0f0c 	teq	r5, ip
 80014ee:	f47f af25 	bne.w	800133c <__aeabi_dmul+0x234>
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	e72c      	b.n	8001352 <__aeabi_dmul+0x24a>
 80014f8:	ea95 0f0c 	teq	r5, ip
 80014fc:	d106      	bne.n	800150c <__aeabi_ddiv+0x1b0>
 80014fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001502:	f43f aefd 	beq.w	8001300 <__aeabi_dmul+0x1f8>
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	e722      	b.n	8001352 <__aeabi_dmul+0x24a>
 800150c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001510:	bf18      	it	ne
 8001512:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001516:	f47f aec5 	bne.w	80012a4 <__aeabi_dmul+0x19c>
 800151a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800151e:	f47f af0d 	bne.w	800133c <__aeabi_dmul+0x234>
 8001522:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001526:	f47f aeeb 	bne.w	8001300 <__aeabi_dmul+0x1f8>
 800152a:	e712      	b.n	8001352 <__aeabi_dmul+0x24a>

0800152c <__aeabi_d2iz>:
 800152c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8001530:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001534:	d215      	bcs.n	8001562 <__aeabi_d2iz+0x36>
 8001536:	d511      	bpl.n	800155c <__aeabi_d2iz+0x30>
 8001538:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800153c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001540:	d912      	bls.n	8001568 <__aeabi_d2iz+0x3c>
 8001542:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800154a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800154e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001552:	fa23 f002 	lsr.w	r0, r3, r2
 8001556:	bf18      	it	ne
 8001558:	4240      	negne	r0, r0
 800155a:	4770      	bx	lr
 800155c:	f04f 0000 	mov.w	r0, #0
 8001560:	4770      	bx	lr
 8001562:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001566:	d105      	bne.n	8001574 <__aeabi_d2iz+0x48>
 8001568:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800156c:	bf08      	it	eq
 800156e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001572:	4770      	bx	lr
 8001574:	f04f 0000 	mov.w	r0, #0
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop

0800157c <atexit>:
 800157c:	4601      	mov	r1, r0
 800157e:	2000      	movs	r0, #0
 8001580:	4602      	mov	r2, r0
 8001582:	4603      	mov	r3, r0
 8001584:	f000 b838 	b.w	80015f8 <__register_exitproc>

08001588 <exit>:
 8001588:	b508      	push	{r3, lr}
 800158a:	2100      	movs	r1, #0
 800158c:	4604      	mov	r4, r0
 800158e:	f000 f88f 	bl	80016b0 <__call_exitprocs>
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <exit+0x1c>)
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001598:	b103      	cbz	r3, 800159c <exit+0x14>
 800159a:	4798      	blx	r3
 800159c:	4620      	mov	r0, r4
 800159e:	f000 f907 	bl	80017b0 <_exit>
 80015a2:	bf00      	nop
 80015a4:	080017b8 	.word	0x080017b8

080015a8 <__libc_init_array>:
 80015a8:	b570      	push	{r4, r5, r6, lr}
 80015aa:	4e0f      	ldr	r6, [pc, #60]	; (80015e8 <__libc_init_array+0x40>)
 80015ac:	4d0f      	ldr	r5, [pc, #60]	; (80015ec <__libc_init_array+0x44>)
 80015ae:	1b76      	subs	r6, r6, r5
 80015b0:	10b6      	asrs	r6, r6, #2
 80015b2:	bf18      	it	ne
 80015b4:	2400      	movne	r4, #0
 80015b6:	d005      	beq.n	80015c4 <__libc_init_array+0x1c>
 80015b8:	3401      	adds	r4, #1
 80015ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80015be:	4798      	blx	r3
 80015c0:	42a6      	cmp	r6, r4
 80015c2:	d1f9      	bne.n	80015b8 <__libc_init_array+0x10>
 80015c4:	4e0a      	ldr	r6, [pc, #40]	; (80015f0 <__libc_init_array+0x48>)
 80015c6:	4d0b      	ldr	r5, [pc, #44]	; (80015f4 <__libc_init_array+0x4c>)
 80015c8:	1b76      	subs	r6, r6, r5
 80015ca:	f000 f8f7 	bl	80017bc <_init>
 80015ce:	10b6      	asrs	r6, r6, #2
 80015d0:	bf18      	it	ne
 80015d2:	2400      	movne	r4, #0
 80015d4:	d006      	beq.n	80015e4 <__libc_init_array+0x3c>
 80015d6:	3401      	adds	r4, #1
 80015d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015dc:	4798      	blx	r3
 80015de:	42a6      	cmp	r6, r4
 80015e0:	d1f9      	bne.n	80015d6 <__libc_init_array+0x2e>
 80015e2:	bd70      	pop	{r4, r5, r6, pc}
 80015e4:	bd70      	pop	{r4, r5, r6, pc}
 80015e6:	bf00      	nop
 80015e8:	080017d4 	.word	0x080017d4
 80015ec:	080017d4 	.word	0x080017d4
 80015f0:	080017dc 	.word	0x080017dc
 80015f4:	080017d4 	.word	0x080017d4

080015f8 <__register_exitproc>:
 80015f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015fc:	4c25      	ldr	r4, [pc, #148]	; (8001694 <__register_exitproc+0x9c>)
 80015fe:	6825      	ldr	r5, [r4, #0]
 8001600:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8001604:	4606      	mov	r6, r0
 8001606:	4688      	mov	r8, r1
 8001608:	4692      	mov	sl, r2
 800160a:	4699      	mov	r9, r3
 800160c:	b3cc      	cbz	r4, 8001682 <__register_exitproc+0x8a>
 800160e:	6860      	ldr	r0, [r4, #4]
 8001610:	281f      	cmp	r0, #31
 8001612:	dc18      	bgt.n	8001646 <__register_exitproc+0x4e>
 8001614:	1c43      	adds	r3, r0, #1
 8001616:	b17e      	cbz	r6, 8001638 <__register_exitproc+0x40>
 8001618:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800161c:	2101      	movs	r1, #1
 800161e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8001622:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 8001626:	fa01 f200 	lsl.w	r2, r1, r0
 800162a:	4317      	orrs	r7, r2
 800162c:	2e02      	cmp	r6, #2
 800162e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8001632:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8001636:	d01e      	beq.n	8001676 <__register_exitproc+0x7e>
 8001638:	3002      	adds	r0, #2
 800163a:	6063      	str	r3, [r4, #4]
 800163c:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8001640:	2000      	movs	r0, #0
 8001642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <__register_exitproc+0xa0>)
 8001648:	b303      	cbz	r3, 800168c <__register_exitproc+0x94>
 800164a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800164e:	f3af 8000 	nop.w
 8001652:	4604      	mov	r4, r0
 8001654:	b1d0      	cbz	r0, 800168c <__register_exitproc+0x94>
 8001656:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800165a:	2700      	movs	r7, #0
 800165c:	e880 0088 	stmia.w	r0, {r3, r7}
 8001660:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8001664:	4638      	mov	r0, r7
 8001666:	2301      	movs	r3, #1
 8001668:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800166c:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8001670:	2e00      	cmp	r6, #0
 8001672:	d0e1      	beq.n	8001638 <__register_exitproc+0x40>
 8001674:	e7d0      	b.n	8001618 <__register_exitproc+0x20>
 8001676:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800167a:	430a      	orrs	r2, r1
 800167c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8001680:	e7da      	b.n	8001638 <__register_exitproc+0x40>
 8001682:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8001686:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800168a:	e7c0      	b.n	800160e <__register_exitproc+0x16>
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001694:	080017b8 	.word	0x080017b8
 8001698:	00000000 	.word	0x00000000

0800169c <register_fini>:
 800169c:	4b02      	ldr	r3, [pc, #8]	; (80016a8 <register_fini+0xc>)
 800169e:	b113      	cbz	r3, 80016a6 <register_fini+0xa>
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <register_fini+0x10>)
 80016a2:	f7ff bf6b 	b.w	800157c <atexit>
 80016a6:	4770      	bx	lr
 80016a8:	00000000 	.word	0x00000000
 80016ac:	08001785 	.word	0x08001785

080016b0 <__call_exitprocs>:
 80016b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b4:	4b31      	ldr	r3, [pc, #196]	; (800177c <__call_exitprocs+0xcc>)
 80016b6:	b083      	sub	sp, #12
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80016c0:	4681      	mov	r9, r0
 80016c2:	460e      	mov	r6, r1
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	9b00      	ldr	r3, [sp, #0]
 80016c8:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
 80016cc:	b327      	cbz	r7, 8001718 <__call_exitprocs+0x68>
 80016ce:	f8dd a004 	ldr.w	sl, [sp, #4]
 80016d2:	687c      	ldr	r4, [r7, #4]
 80016d4:	1e65      	subs	r5, r4, #1
 80016d6:	d40e      	bmi.n	80016f6 <__call_exitprocs+0x46>
 80016d8:	3401      	adds	r4, #1
 80016da:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80016de:	f04f 0800 	mov.w	r8, #0
 80016e2:	b1e6      	cbz	r6, 800171e <__call_exitprocs+0x6e>
 80016e4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80016e8:	42b3      	cmp	r3, r6
 80016ea:	d018      	beq.n	800171e <__call_exitprocs+0x6e>
 80016ec:	3d01      	subs	r5, #1
 80016ee:	1c6b      	adds	r3, r5, #1
 80016f0:	f1a4 0404 	sub.w	r4, r4, #4
 80016f4:	d1f5      	bne.n	80016e2 <__call_exitprocs+0x32>
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <__call_exitprocs+0xd0>)
 80016f8:	b173      	cbz	r3, 8001718 <__call_exitprocs+0x68>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d136      	bne.n	800176e <__call_exitprocs+0xbe>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d034      	beq.n	8001770 <__call_exitprocs+0xc0>
 8001706:	4638      	mov	r0, r7
 8001708:	f8ca 3000 	str.w	r3, [sl]
 800170c:	f3af 8000 	nop.w
 8001710:	f8da 7000 	ldr.w	r7, [sl]
 8001714:	2f00      	cmp	r7, #0
 8001716:	d1dc      	bne.n	80016d2 <__call_exitprocs+0x22>
 8001718:	b003      	add	sp, #12
 800171a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6822      	ldr	r2, [r4, #0]
 8001722:	3b01      	subs	r3, #1
 8001724:	42ab      	cmp	r3, r5
 8001726:	bf0c      	ite	eq
 8001728:	607d      	streq	r5, [r7, #4]
 800172a:	f8c4 8000 	strne.w	r8, [r4]
 800172e:	2a00      	cmp	r2, #0
 8001730:	d0dc      	beq.n	80016ec <__call_exitprocs+0x3c>
 8001732:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001736:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800173a:	2101      	movs	r1, #1
 800173c:	40a9      	lsls	r1, r5
 800173e:	4219      	tst	r1, r3
 8001740:	d108      	bne.n	8001754 <__call_exitprocs+0xa4>
 8001742:	4790      	blx	r2
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	455b      	cmp	r3, fp
 8001748:	d1bd      	bne.n	80016c6 <__call_exitprocs+0x16>
 800174a:	f8da 3000 	ldr.w	r3, [sl]
 800174e:	42bb      	cmp	r3, r7
 8001750:	d0cc      	beq.n	80016ec <__call_exitprocs+0x3c>
 8001752:	e7b8      	b.n	80016c6 <__call_exitprocs+0x16>
 8001754:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001758:	4219      	tst	r1, r3
 800175a:	d104      	bne.n	8001766 <__call_exitprocs+0xb6>
 800175c:	4648      	mov	r0, r9
 800175e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001762:	4790      	blx	r2
 8001764:	e7ee      	b.n	8001744 <__call_exitprocs+0x94>
 8001766:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800176a:	4790      	blx	r2
 800176c:	e7ea      	b.n	8001744 <__call_exitprocs+0x94>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	46ba      	mov	sl, r7
 8001772:	461f      	mov	r7, r3
 8001774:	2f00      	cmp	r7, #0
 8001776:	d1ac      	bne.n	80016d2 <__call_exitprocs+0x22>
 8001778:	e7ce      	b.n	8001718 <__call_exitprocs+0x68>
 800177a:	bf00      	nop
 800177c:	080017b8 	.word	0x080017b8
 8001780:	00000000 	.word	0x00000000

08001784 <__libc_fini_array>:
 8001784:	b538      	push	{r3, r4, r5, lr}
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <__libc_fini_array+0x24>)
 8001788:	4d08      	ldr	r5, [pc, #32]	; (80017ac <__libc_fini_array+0x28>)
 800178a:	1aed      	subs	r5, r5, r3
 800178c:	10ac      	asrs	r4, r5, #2
 800178e:	bf18      	it	ne
 8001790:	18ed      	addne	r5, r5, r3
 8001792:	d005      	beq.n	80017a0 <__libc_fini_array+0x1c>
 8001794:	3c01      	subs	r4, #1
 8001796:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800179a:	4798      	blx	r3
 800179c:	2c00      	cmp	r4, #0
 800179e:	d1f9      	bne.n	8001794 <__libc_fini_array+0x10>
 80017a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017a4:	f000 b810 	b.w	80017c8 <_fini>
 80017a8:	080017dc 	.word	0x080017dc
 80017ac:	080017e0 	.word	0x080017e0

080017b0 <_exit>:
 80017b0:	e7fe      	b.n	80017b0 <_exit>
 80017b2:	bf00      	nop
 80017b4:	00000043 	.word	0x00000043

080017b8 <_global_impure_ptr>:
 80017b8:	20000028                                (.. 

080017bc <_init>:
 80017bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017be:	bf00      	nop
 80017c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017c2:	bc08      	pop	{r3}
 80017c4:	469e      	mov	lr, r3
 80017c6:	4770      	bx	lr

080017c8 <_fini>:
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ca:	bf00      	nop
 80017cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ce:	bc08      	pop	{r3}
 80017d0:	469e      	mov	lr, r3
 80017d2:	4770      	bx	lr
